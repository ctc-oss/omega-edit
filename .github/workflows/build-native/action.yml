# Copyright (c) 2021 Concurrent Technologies Corporation.
#                                                                                                               
# Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at                                                    
#                                                                                                               
#     http://www.apache.org/licenses/LICENSE-2.0                                                                
#                                                                                                               
# Unless required by applicable law or agreed to in writing, software is distributed under the License is       
# distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or              
# implied.  See the License for the specific language governing permissions and limitations under the License.  

---
name: Build Native
description: Reusable action for building native code
inputs:
  runner-os:
    description: 'OS Name of Runner (macOS, Linux, Windows)'
    required: true
  os-name:
    description: 'OS Name (runs-on value)'
    required: true
runs:
  using: "composite"
  steps:
    - name: Enable Developer Command Prompt ðŸ’»
      if: inputs.runner-os == 'Windows'
      uses: ilammy/msvc-dev-cmd@v1

    - name: Setup cmake ðŸ”§
      uses: lukka/get-cmake@latest

    - name: Set install path ðŸ”§
      shell: bash
      run: |
          mkdir -p _install
          echo "install_path=$(pwd)/_install" >> $GITHUB_ENV
          echo "install_rel_path=_install" >> $GITHUB_ENV

    - name: Prepare, Build, Test, and Install Î©editâ„¢ native library ðŸ¦™
      shell: bash
      run: |
        cmake -S . -B build -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=ON --install-prefix "${{ env.install_path }}"
        cmake --build build --config Release
        ctest -C Release --test-dir build/core --output-on-failure
        cmake --install build/packages/core --prefix "${{ env.install_path }}" --config Release

    - name: Find Library For ${{ inputs.runner-os }} ðŸ“–
      shell: bash
      run: |
        if [ "${{ inputs.runner-os }}" == "Windows" ]; then
          libname=omega_edit.dll
        elif [ "${{ inputs.runner-os }}" == "macOS" ]; then
          libname=libomega_edit.dylib
        else
          libname=libomega_edit.so
        fi
        libpath=$(find -L "${{ env.install_rel_path }}" -type f -name "${libname}" | head -n 1)
        if ! [ -s "${libpath}" ]; then
          echo "ERROR: Library ${libname} not found in ${{ env.install_rel_path }}" >&2
          find -L "${{ env.install_rel_path }}" -type f
          exit 1
        fi
        ls -l "${libpath}"
        echo "libname=${libname}" >> $GITHUB_ENV
        echo "libpath=${libpath}" >> $GITHUB_ENV

    - name: Upload Native Library (${{ inputs.os-name }}-${{ env.libname }}) ðŸ”º
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.os-name }}-${{ env.libname }}
        path: ${{ env.libpath }}
        retention-days: 5
        if-no-files-found: error
