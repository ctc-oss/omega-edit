# Copyright (c) 2021 Concurrent Technologies Corporation.
#                                                                                                               
# Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at                                                    
#                                                                                                               
#     http://www.apache.org/licenses/LICENSE-2.0                                                                
#                                                                                                               
# Unless required by applicable law or agreed to in writing, software is distributed under the License is       
# distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or              
# implied.  See the License for the specific language governing permissions and limitations under the License.  

---
name: Unit Tests
on:
  push:
    branches:
      - '**'

jobs:
  build-native:
    strategy:
      matrix:
        os: [ windows-2022, macos-12, ubuntu-20.04 ]
    name: Native build and test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    steps:
      - name: Enable Developer Command Prompt 💻
        if: runner.os == 'Windows'
        uses: ilammy/msvc-dev-cmd@v1

      - name: Checkout 🛎️
        uses: actions/checkout@v3

      - name: Setup Java ☕
        uses: actions/setup-java@v3.9.0
        with:
          distribution: temurin
          java-version: 8
          cache: sbt

      - name: Setup Python 🐍
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install Conan 💪
        id: conan
        uses: turtlebrowser/get-conan@main

      - name: Conan version 💪
        run: echo "${{ steps.conan.outputs.version }}"

      - name: Setup cmake 🔧
        uses: lukka/get-cmake@latest

      - name: Prepare, Build, and Install Ωedit 🔧
        run: |
          cmake -S . -B build -DCMAKE_BUILD_TYPE=Debug -DBUILD_SHARED_LIBS=YES --install-prefix "${PWD}/_install"
          cmake --build build
          ctest -C Debug --test-dir build --output-on-failure
          cmake --install build/packaging --prefix "${PWD}/_install" --config Debug

      - name: Upload Native (.dylib) library - Macos 🔺
        uses: actions/upload-artifact@v3
        if: runner.os == 'macOS'
        with:
          name: libomega_edit.dylib
          path: _install/lib/libomega_edit.dylib

      - name: Upload Native (.so) library - Linux 🔺
        uses: actions/upload-artifact@v3
        if: runner.os == 'Linux'
        with:
          name: libomega_edit.so
          path: _install/lib/libomega_edit.so

      - name: Upload Native (.dll) library - Windows 🔺
        uses: actions/upload-artifact@v3
        if: runner.os == 'Windows'
        with:
          name: omega_edit.dll
          path: _install/bin/omega_edit.dll

  build-middleware:
    needs: [ build-native ]
    strategy:
      matrix:
        os: [ macos-12, ubuntu-20.04] #, windows-2022 ] # TODO: Add in later
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout 🛎️
        uses: actions/checkout@v3

      - name: Setup Java ☕
        uses: actions/setup-java@v3.9.0
        with:
          distribution: temurin
          java-version: 8
          cache: sbt

      - name: Download macos library file 🔻
        uses: actions/download-artifact@v3
        if: runner.os == 'macOS'
        with:
          name: libomega_edit.dylib
          path: lib/libomega_edit.dylib

      - name: Download linux library file 🔻
        uses: actions/download-artifact@v3
        if: runner.os == 'Linux'
        with:
          name: libomega_edit.so
          path: lib/libomega_edit.so

      - name: Download windows library file 🔻
        uses: actions/download-artifact@v3
        if: runner.os == 'Windows'
        with:
          name: omega_edit.dll
          path: lib/omega_edit.dll

      - name: Move out library file 🛻
        run: |
          if [[ ${{ runner.os }} == 'Linux' ]]; then
            LIB_FILENAME="libomega_edit.so"
          elif [[ ${{ runner.os }} == 'macOS' ]]; then
            LIB_FILENAME="libomega_edit.dylib"
          else
            LIB_FILENAME="omega_edit.dll"
          fi

          mv -v "lib/${LIB_FILENAME}" "lib/${LIB_FILENAME}_dir"
          mv -v "lib/${LIB_FILENAME}_dir/$LIB_FILENAME" "lib/$LIB_FILENAME"
          rm -rf "lib/${LIB_FILENAME}_dir"
        shell: bash

      - name: Check Scala headers ✔️
        run: sbt headerCheckAll
        working-directory: src/rpc/server/scala

      - name: Package Scala API 🎁
        run: sbt installM2 # runs test so specifically running sbt test not needed
        working-directory: src/rpc/server/scala
        timeout-minutes: 30

      - name: Archive M2 🔺
        uses: actions/upload-artifact@v3
        if: success() || failure()
        with:
          name: ${{ matrix.os }}-artifacts
          path: ~/.m2/repository/com/ctc/*
          if-no-files-found: error

      - name: Test Scala RPC server 📋
        run: sbt serv/test
        working-directory: src/rpc/server/scala
        timeout-minutes: 30

      - name: Package & Run Scala RPC server 📋
        run: |
          sbt pkgServer
          cp -r serv/target/universal/omega-edit-grpc-server*.zip ../../client/ts
        shell: bash
        working-directory: src/rpc/server/scala

      - name: Yarn - Install
        run: yarn install
        shell: bash
        working-directory: src/rpc/client/ts
      
      - name: Yarn - Compile SRC
        run: yarn compile-src
        shell: bash
        working-directory: src/rpc/client/ts

      - name: Yarn Test 📋
        run: yarn test || true # auto spins scala server up and down
        shell: bash
        working-directory: src/rpc/client/ts
        timeout-minutes: 30
