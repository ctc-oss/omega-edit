# Copyright (c) 2021 Concurrent Technologies Corporation.
#                                                                                                               
# Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at                                                    
#                                                                                                               
#     http://www.apache.org/licenses/LICENSE-2.0                                                                
#                                                                                                               
# Unless required by applicable law or agreed to in writing, software is distributed under the License is       
# distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or              
# implied.  See the License for the specific language governing permissions and limitations under the License.  

---
name: Automatic Release
on:
  push:
    tags:
      - 'v*.*.*'
env:
  node_version: 14
  export_cmd: |
    GIT_TAG=$(echo ${GITHUB_REF#refs/*/} | cut -d 'v' -f 2)
    PKG_VERSION=$(echo $(node -p "JSON.stringify(require('./src/rpc/client/ts/package.json').version)") | sed 's|"||g')
    echo "GIT_TAG=$GIT_TAG" >> $GITHUB_ENV
    echo "PKG_VERSION=$PKG_VERSION" >> $GITHUB_ENV

jobs:
  node-build:
    name: Build ubuntu-latest üîß
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Export git tag and package.json version üö¢
        run: ${{ env.export_cmd }}
        shell: bash

      - name: Check if git tag matches package version ‚úÖ
        run: if [[ ${{env.GIT_TAG}} != ${{env.PKG_VERSION}} ]]; then exit 1; else exit 0; fi
        shell: bash

      - name: Create package tarball file üîß
        run: |
          cd src/rpc/client/ts
          yarn install
          yarn package

      - name: Upload ${{ env.NODE_FILE }} üî∫
        uses: actions/upload-artifact@v2
        with:
          name: omega-edit-v${{ env.PKG_VERSION }}.tgz
          path: src/rpc/client/ts/omega-edit-v${{ env.PKG_VERSION }}.tgz

  native-build-mac-win:
    strategy:
      matrix:
        os: [macos-latest, windows-latest]
    name: Build ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    steps:
      - name: Enable Developer Command Prompt üíª
        if: runner.os == 'Windows'
        uses: ilammy/msvc-dev-cmd@v1

      - uses: actions/checkout@v2.3.5
        with:
          submodules: recursive

      - name: Export git tag and package.json version üö¢
        run: ${{ env.export_cmd }}
        shell: bash

      - uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install Conan
        uses: turtlebrowser/get-conan@main

      - name: Setup cmake üîß
        uses: lukka/get-cmake@latest

      - name: Build Œ©edit mac
        if: startsWith(matrix.os, 'mac')
        run: |
          mkdir -p build && cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=YES -DBUILD_DOCS=OFF
          cmake --build . --target omega_edit

      - name: Build Œ©edit windows
        if: startsWith(matrix.os, 'win')
        run: |
          cmake -S . -B build -DCMAKE_BUILD_TYPE=Release
          cmake --build build

      - name: Move library file
        run: mv build/lib/* lib
        shell: bash

      - name: Setup JDK
        uses: actions/setup-java@v2
        with:
          distribution: adopt
          java-version: 8

      - name: Package Scala Native
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: sbt +native/publishM2
        working-directory: src/bindings/scala

      - name: Upload Native JARs
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.os }}-artifacts
          path: ~/.m2/repository/com/ctc/omega-edit-native*
          if-no-files-found: error

  api-native-publish:
    needs: [native-build-mac-win]
    name: Publish Scala API and Native packages
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2.3.5
        with:
          submodules: recursive
          
      - name: Export git tag and package.json version üö¢
        run: ${{ env.export_cmd }}

      - uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install Conan
        uses: turtlebrowser/get-conan@main

      - name: Setup cmake
        uses: jwlawson/actions-setup-cmake@v1.12
        with:
          cmake-version: '3.16.x'

      - name: Build Œ©edit
        run: |
          mkdir -p build && cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=YES -DBUILD_DOCS=OFF
          cmake --build . --target omega_edit
          mv lib/* ../lib

      - name: Setup JDK
        uses: actions/setup-java@v2
        with:
          distribution: adopt
          java-version: 8

      - name: Download macos Native JARs
        uses: actions/download-artifact@v2
        with:
          name: macos-latest-artifacts

      - name: Download windows Native JARs
        uses: actions/download-artifact@v2
        with:
          name: windows-latest-artifacts

      - name: Move windows and macos jars out
        run: |
          for folder in "omega-edit-native_2.12" "omega-edit-native_2.13"; do
            mv ${folder}/${{ env.PKG_VERSION }}/${folder}-${{ env.PKG_VERSION }}-windows-* src/bindings/scala/
            mv ${folder}/${{ env.PKG_VERSION }}/${folder}-${{ env.PKG_VERSION }}-macos-* src/bindings/scala/
          done

      - name: Package Scala Native
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          mv build.sbt ci/build.sbt
          mv ci/release.sbt build.sbt
          sbt +native/publish
        working-directory: src/bindings/scala

      - name: Package Scala API
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: sbt +api/publish
        working-directory: src/bindings/scala

      - name: Package Scala SPI
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: sbt +spi/publish
        working-directory: src/bindings/scala

  release:
    name: Release ‚ú®
    runs-on: ubuntu-latest
    needs: [node-build, api-native-publish]
    steps:
      - uses: actions/checkout@v2
      - name: Export git tag and package.json version üö¢
        run: ${{ env.export_cmd }}

      - name: Check if pre-release ‚úÖ
        run: |
          if [[ ${{env.GIT_TAG}} == *"pre-"* || ${{env.GIT_TAG}} == *"-pre"* ]]; then
            echo "PRE_RELEASE=true" >> $GITHUB_ENV
          else
            echo "PRE_RELEASE=false" >> $GITHUB_ENV
          fi
        shell: bash

      - name: Create release üîß
        uses: actions/create-release@v1
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          draft: false
          prerelease: "${{ env.PRE_RELEASE }}"

      ##########################
      ## Node release process ##
      ##########################
      - name: Setup Node üìê
        uses: actions/setup-node@v1
        with:
          registry-url: 'https://registry.npmjs.org'
          node-version: ${{ env.node_version }}

      - name: Download node release file üîª
        uses: actions/download-artifact@v2
        with:
          name: omega-edit-v${{ env.PKG_VERSION }}.tgz
          path: omega-edit-v${{ env.PKG_VERSION }}.tgz

      - name: Move out node package file üõª
        run: |
          mv omega-edit-v${{ env.PKG_VERSION }}.tgz omega-edit-v${{ env.PKG_VERSION }}.tgz_dir
          mv omega-edit-v${{ env.PKG_VERSION }}.tgz_dir/omega-edit-v${{ env.PKG_VERSION }}.tgz omega-edit-v${{ env.PKG_VERSION }}.tar.gz
          rm -rf omega-edit-v${{ env.PKG_VERSION }}.tgz_dir

      - name: Upload node release tarball üî∫
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./omega-edit-v${{ env.PKG_VERSION }}.tar.gz
          asset_name: omega-edit-grpc-node-client-${{ env.PKG_VERSION }}.tar.gz
          asset_content_type: application/tar+gzip

      - name: Publish node package to npm registry üöÄ
        run: |
          cp src/rpc/client/ts/package.json .
          yarn publish omega-edit-v${{ env.PKG_VERSION }}.tar.gz
          rm -rf package.json
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        if: ${{ contains(github.event.head_commit.message, '[node_publish]') }}

      ###########################
      ## Scala release process ##
      ###########################
      - name: Setup JDK
        uses: actions/setup-java@v2
        with:
          distribution: adopt
          java-version: 8

      - name: Package scala reference server
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          mv build.sbt ci/build.sbt
          mv ci/release.sbt build.sbt
          sbt universal:packageBin
        working-directory: src/rpc/server/scala

      - name: Upload scala reference server üî∫
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./src/rpc/server/scala/target/universal/example-grpc-server-${{ env.PKG_VERSION }}*
          asset_name: omega-edit-grpc-scala-server-v${{ env.PKG_VERSION }}.zip
          asset_content_type: application/tar+gzip
