# Copyright (c) 2021 Concurrent Technologies Corporation.
#                                                                                                               
# Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at                                                    
#                                                                                                               
#     http://www.apache.org/licenses/LICENSE-2.0                                                                
#                                                                                                               
# Unless required by applicable law or agreed to in writing, software is distributed under the License is       
# distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or              
# implied.  See the License for the specific language governing permissions and limitations under the License.  

---
name: Automatic Release
on:
  push:
    tags:
      - 'v*.*.*'
env:
  node_version: 14
  export_cmd: |
    GIT_TAG=$(echo ${GITHUB_REF#refs/*/} | cut -d 'v' -f 2)
    PKG_VERSION=$(echo $(node -p "JSON.stringify(require('./src/rpc/client/ts/package.json').version)") | sed 's|"||g')
    echo "GIT_TAG=$GIT_TAG" >> $GITHUB_ENV
    echo "PKG_VERSION=$PKG_VERSION" >> $GITHUB_ENV

jobs:
  create-release:
    name: Create Release ‚ú®
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Export git tag and package.json version üö¢
        run: ${{ env.export_cmd }}
      - name: Check if pre-release ‚úÖ
        run: |
          if [[ ${{ env.GIT_TAG }} == *"pre-"* || ${{ env.GIT_TAG }} == *"-pre"* ]]; then
            echo "PRE_RELEASE=true" >> $GITHUB_ENV
          else
            echo "PRE_RELEASE=false" >> $GITHUB_ENV
          fi
        shell: bash
      - name: Create release üîß
        uses: actions/create-release@v1
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          draft: false
          prerelease: "${{ env.PRE_RELEASE }}"
      - name: Create upload_url file üîß
        run: echo "${{ steps.create_release.outputs.upload_url }}" > upload_url
      - name: Upload upload_url üî∫
        uses: actions/upload-artifact@v3
        with:
          name: upload_url
          path: upload_url

  node-build:
    name: Build ubuntu-latest üîß
    runs-on: ubuntu-latest
    needs: [create-release]
    steps:
      - name: Export git tag and package.json version üö¢
        run: ${{ env.export_cmd }}
        shell: bash
      - name: Checkout üõéÔ∏è
        uses: actions/checkout@v3
      - name: Check if git tag matches package version ‚úÖ
        run: if [[ ${{env.GIT_TAG}} != ${{env.PKG_VERSION}} ]]; then exit 1; else exit 0; fi
        shell: bash
      - name: Create package tarball file üîß
        run: |
          cd src/rpc/client/ts
          yarn install
          yarn package
      - name: Upload ${{ env.NODE_FILE }} üî∫
        uses: actions/upload-artifact@v3
        with:
          name: omega-edit-v${{ env.PKG_VERSION }}.tgz
          path: src/rpc/client/ts/omega-edit-v${{ env.PKG_VERSION }}.tgz

  native-build-mac-win:
    strategy:
      matrix:
        os: [macos-latest, windows-latest]
    name: Build ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    needs: [create-release]
    steps:
      - name: Enable Developer Command Prompt üíª
        if: runner.os == 'Windows'
        uses: ilammy/msvc-dev-cmd@v1
      - name: Export git tag and package.json version üö¢
        run: ${{ env.export_cmd }}
        shell: bash
      - name: Checkout üõéÔ∏è
        uses: actions/checkout@v3
      - name: Check if git tag matches package version ‚úÖ
        run: if [[ ${{ env.GIT_TAG }} != ${{ env.PKG_VERSION }} ]]; then exit 1; else exit 0; fi
        shell: bash
      - name: Install Conan
        uses: turtlebrowser/get-conan@main
      - name: Setup cmake üîß
        uses: lukka/get-cmake@latest
      - name: Setup Java ‚òï
        uses: actions/setup-java@v3.4.1
        with:
          distribution: temurin
          java-version: 8
          cache: sbt
      - name: Build Œ©edit
        run: |
          cmake -S . -B build -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=YES -DBUILD_DOCS=OFF
          cmake --build build --target omega_edit
      - name: Move library file mac
        if: startsWith(matrix.os, 'mac')
        run: mv build/lib/* lib
        shell: bash
      - name: Move library file windows
        if: startsWith(matrix.os, 'win')
        run: mv build/bin/omega_edit.dll lib/
        shell: bash
      - name: Package Scala Native
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: sbt native/publishM2
      - name: Upload Native JARs
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.os }}-artifacts
          path: ~/.m2/repository/com/ctc/omega-edit-native*
          if-no-files-found: error

  api-native-publish:
    needs: [native-build-mac-win]
    name: Publish Scala API and Native packages
    runs-on: ubuntu-latest
    steps:
      - name: Export git tag and package.json version üö¢
        run: ${{ env.export_cmd }}
      - name: Checkout üõéÔ∏è
        uses: actions/checkout@v3
      - name: Setup Java ‚òï
        uses: actions/setup-java@v3.4.1
        with:
          distribution: temurin
          java-version: 8
          cache: sbt
      - name: Install Conan üí™
        id: conan
        uses: turtlebrowser/get-conan@main
      - name: Conan version üí™
        run: echo "${{ steps.conan.outputs.version }}"
      - name: Setup cmake üîß
        uses: lukka/get-cmake@latest
      - name: Build Œ©edit
        run: |
          cmake -S . -B build -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=YES -DBUILD_DOCS=OFF
          cmake --build build --target omega_edit
      - name: Move library file
        run: mv build/lib/* lib
        shell: bash
      - name: Download macos Native JARs
        uses: actions/download-artifact@v3
        with:
          name: macos-latest-artifacts
      - name: Download windows Native JARs
        uses: actions/download-artifact@v3
        with:
          name: windows-latest-artifacts
      - name: Move windows and macos jars out
        run: |
          for folder in "omega-edit-native_2.13"; do
            mv ${folder}/${{ env.PKG_VERSION }}/${folder}-${{ env.PKG_VERSION }}-windows-* .
            mv ${folder}/${{ env.PKG_VERSION }}/${folder}-${{ env.PKG_VERSION }}-macos-* .
          done
      - name: Package Scala Native
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          mv build.sbt .github/build.sbt
          mv .github/release.sbt build.sbt
          sbt native/publish
      - name: Package Scala API
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: sbt api/publish
      - name: Package Scala SPI
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: sbt spi/publish

  server-packaging:
    needs: [api-native-publish]
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    name: Build server ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    steps:
      - name: Enable Developer Command Prompt üíª
        if: runner.os == 'Windows'
        uses: ilammy/msvc-dev-cmd@v1
      - name: Export git tag and package.json version üö¢
        run: ${{ env.export_cmd }}
        shell: bash
      - name: Checkout üõéÔ∏è
        uses: actions/checkout@v3
      - name: Setup Java ‚òï
        uses: actions/setup-java@v3.4.1
        with:
          distribution: temurin
          java-version: 8
          cache: sbt
      - name: Package scala reference server
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          sbt universal:packageBin
          cd target/universal/
          SERVER_RELEASE_FILE=$(echo example-grpc-server-${{ env.PKG_VERSION }}*)
          unzip $SERVER_RELEASE_FILE
          rm -rf $SERVER_RELEASE_FILE
          mv $(echo ${SERVER_RELEASE_FILE%.zip*}) ${{ matrix.os }}-server
          mv ${{ matrix.os }}-server ../../${{ matrix.os }}-server
        working-directory: src/rpc/server/scala
        shell: bash
      - name: Upload {{ matrix.os }} server üî∫
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.os }}-server
          path: src/rpc/server/scala/${{ matrix.os }}-server
          if-no-files-found: error

  node-release:
    name: Node Release ‚ú®
    runs-on: ubuntu-latest
    needs: [node-build]
    steps:
      - name: Export git tag and package.json version üö¢
        run: ${{ env.export_cmd }}
      - name: Checkout üõéÔ∏è
        uses: actions/checkout@v3
      - name: Download upload_url üîª
        uses: actions/download-artifact@v3
        with:
          name: upload_url
      - name: Add upload_url to GITHUB_ENV
        run: |
          UPLOAD_URL=$(cat upload_url)
          echo "UPLOAD_URL=$UPLOAD_URL" >> $GITHUB_ENV

      ##########################
      ## Node release process ##
      ##########################
      - name: Setup Node üìê
        uses: actions/setup-node@v3
        with:
          registry-url: 'https://registry.npmjs.org'
          node-version: ${{ env.node_version }}
      - name: Download node release file üîª
        uses: actions/download-artifact@v3
        with:
          name: omega-edit-v${{ env.PKG_VERSION }}.tgz
          path: omega-edit-v${{ env.PKG_VERSION }}.tgz
      - name: Move out node package file üõª
        run: |
          mv omega-edit-v${{ env.PKG_VERSION }}.tgz omega-edit-v${{ env.PKG_VERSION }}.tgz_dir
          mv omega-edit-v${{ env.PKG_VERSION }}.tgz_dir/omega-edit-v${{ env.PKG_VERSION }}.tgz omega-edit-v${{ env.PKG_VERSION }}.tar.gz
          rm -rf omega-edit-v${{ env.PKG_VERSION }}.tgz_dir
      - name: Upload node release tarball üî∫
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ env.UPLOAD_URL }}
          asset_path: ./omega-edit-v${{ env.PKG_VERSION }}.tar.gz
          asset_name: omega-edit-grpc-node-client-${{ env.PKG_VERSION }}.tar.gz
          asset_content_type: application/tar+gzip
      - name: Publish node package to npm registry üöÄ
        run: |
          cp src/rpc/client/ts/package.json .
          yarn publish omega-edit-v${{ env.PKG_VERSION }}.tar.gz
          rm -rf package.json
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        if: ${{ contains(github.event.head_commit.message, '[node_publish]') }}

  scala-release:
    name: Scala Release ‚ú®
    runs-on: ubuntu-latest
    needs: [server-packaging]
    steps:
      - name: Export git tag and package.json version üö¢
        run: ${{ env.export_cmd }}
      - name: Checkout üõéÔ∏è
        uses: actions/checkout@v3
      - name: Download upload_url üîª
        uses: actions/download-artifact@v3
        with:
          name: upload_url
      - name: Add upload_url to GITHUB_ENV
        run: |
          UPLOAD_URL=$(cat upload_url)
          echo "UPLOAD_URL=$UPLOAD_URL" >> $GITHUB_ENV

      ###########################
      ## Scala release process ##
      ###########################
      - name: Setup Java ‚òï
        uses: actions/setup-java@v3.4.1
        with:
          distribution: temurin
          java-version: 8
          cache: sbt
      - name: Download macos server üîª
        uses: actions/download-artifact@v3
        with:
          name: macos-latest-server
          path: macos-latest-server
      - name: Download linux server üîª
        uses: actions/download-artifact@v3
        with:
          name: ubuntu-latest-server
          path: ubuntu-latest-server
      - name: Download windows server üîª
        uses: actions/download-artifact@v3
        with:
          name: windows-latest-server
          path: windows-latest-server
      - name: Combine all servers into one zip
        run: |
          mkdir -p omega-edit-scala-server-${{ env.PKG_VERSION }}
          mv macos-latest-server omega-edit-scala-server-${{ env.PKG_VERSION }}/macos
          mv windows-latest-server omega-edit-scala-server-${{ env.PKG_VERSION }}/windows
          mv ubuntu-latest-server omega-edit-scala-server-${{ env.PKG_VERSION }}/linux
          zip -r "omega-edit-scala-server-${{ env.PKG_VERSION }}.zip" omega-edit-scala-server-${{ env.PKG_VERSION }}
      - name: Upload scala reference server üî∫
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ env.UPLOAD_URL }}
          asset_path: ./omega-edit-scala-server-${{ env.PKG_VERSION }}.zip
          asset_name: omega-edit-scala-server-${{ env.PKG_VERSION }}.zip
          asset_content_type: application/tar+gzip
