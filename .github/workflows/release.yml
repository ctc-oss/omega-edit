# Copyright (c) 2021 Concurrent Technologies Corporation.                                                       
#                                                                                                               
# Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at                                                    
#                                                                                                               
#     http://www.apache.org/licenses/LICENSE-2.0                                                                
#                                                                                                               
# Unless required by applicable law or agreed to in writing, software is distributed under the License is       
# distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or              
# implied.  See the License for the specific language governing permissions and limitations under the License.  

---
name: Automatic Release
on:
  push:
    tags:
      - 'v*.*.*'
env:
  node_version: 14
  electron_version: 13.6.3
  export_cmd: |
    GIT_TAG=$(echo ${GITHUB_REF#refs/*/} | cut -d 'v' -f 2)
    PKG_VERSION=$(echo $(node -p "JSON.stringify(require('./package.json').version)") | sed 's|"||g')
    echo "GIT_TAG=$GIT_TAG" >> $GITHUB_ENV
    echo "PKG_VERSION=$PKG_VERSION" >> $GITHUB_ENV

jobs:
  node-build:
    strategy:
      matrix:
        os: [macos-11, ubuntu-20.04]
    name: Build ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2.3.5
      - name: Setup Node
        uses: actions/setup-node@v1.4.6
        with:
          node-version: ${{ env.node_version }}

      - name: Export git tag and package.json version
        run: ${{ env.export_cmd }}

      - name: Check if git tag matches package version
        run: if [[ ${{env.GIT_TAG}} != ${{env.PKG_VERSION}} ]]; then exit 1; else exit 0; fi
        shell: bash

      - name: Create addon file
        run: yarn gyp-rebuild

      - name: Export addon file name
        run: |
          NODE_FILE=""

          if [[ ${{ matrix.os }} == *"macos"* ]]; then
            NODE_FILE="omega_edit_darwin.node"
            mv module/omega_edit/omega_edit_mac.node module/omega_edit/$NODE_FILE
          else
            NODE_FILE="omega_edit_linux.node"
          fi

          echo "NODE_FILE=$(echo $NODE_FILE)" >> $GITHUB_ENV

      - name: Upload ${{ env.NODE_FILE }}
        uses: actions/upload-artifact@v2.3.1
        with:
          name: ${{ env.NODE_FILE }}
          path: module/omega_edit/${{ env.NODE_FILE }}

  scala-build:
    strategy:
      matrix:
        os: [macos-11, ubuntu-20.04]
    name: Build ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2.3.5
      - uses: actions/setup-java@v2.5.0
        with:
          distribution: 'adopt'
          java-version: '11'

      - name: Export git tag and package.json version
        run: ${{ env.export_cmd }}

      - name: Check if git tag matches package version
        run: if [[ ${{env.GIT_TAG}} != ${{env.PKG_VERSION}} ]]; then exit 1; else exit 0; fi
        shell: bash

      - name: Compile lib file
        run: ./compile.sh compile-lib ${{ matrix.os }}

      - name: Upload lib file - Mac
        if: "${{ matrix.os }} == macos-11"
        uses: actions/upload-artifact@v2.3.1
        with:
          name: libomega_edit.dylib
          path: lib/libomega_edit.dylib

      - name: Upload lib file - Linux
        if: "${{ matrix.os }} == ubuntu-20.04"
        uses: actions/upload-artifact@v2.3.1
        with:
          name: libomega_edit.so
          path: lib/libomega_edit.so

  release:
    name: Release
    runs-on: ubuntu-20.04
    needs: [node-build, scala-build]
    steps:
      - uses: actions/checkout@v2.3.5

      - name: Export git tag and package.json version
        run: ${{ env.export_cmd }}

      - name: Check if pre-release
        run: |
          if [[ ${{env.GIT_TAG}} == *"pre-"* || ${{env.GIT_TAG}} == *"-pre"* ]]; then
            echo "PRE_RELEASE=true" >> $GITHUB_ENV
          else
            echo "PRE_RELEASE=false" >> $GITHUB_ENV
          fi
        shell: bash

      - name: Create release
        uses: actions/create-release@v1.1.4
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          draft: false
          prerelease: "${{ env.PRE_RELEASE }}"

      ##########################
      ## Node release process ##
      ##########################
      - name: Setup Node
        uses: actions/setup-node@v1.4.6
        with:
          registry-url: 'https://registry.npmjs.org'
          node-version: ${{ env.node_version }}

      - name: Download darwin node files
        uses: actions/download-artifact@v2.1.0
        with:
          name: omega_edit_darwin.node
          path: module/omega_edit/omega_edit_darwin.node

      - name: Download linux node files
        uses: actions/download-artifact@v2.1.0
        with:
          name: omega_edit_linux.node
          path: module/omega_edit/omega_edit_linux.node

      - name: Move out node files
        run: |
          cd module/omega_edit/
          mv omega_edit_linux.node omega_edit_linux.node_dir
          mv omega_edit_darwin.node omega_edit_darwin.node_dir
          mv omega_edit_linux.node_dir/omega_edit_linux.node .
          mv omega_edit_darwin.node_dir/omega_edit_darwin.node .
          rm -rf omega_edit_linux.node_dir omega_edit_darwin.node_dir

      - name: Create node release tarball
        run: yarn pack --filename omega-edit-v${{ env.PKG_VERSION }}.tar.gz

      - name: Upload node release tarball
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./omega-edit-v${{ env.PKG_VERSION }}.tar.gz
          asset_name: omega-edit-node-${{ env.PKG_VERSION }}.tar.gz
          asset_content_type: application/tar+gzip

      - name: Publish node package to npm registry
        run: yarn publish omega-edit-v${{ env.PKG_VERSION }}.tar.gz
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      ##########################
      ## Java release process ##
      ##########################
      - name: Download mac lib file
        uses: actions/download-artifact@v2.1.0
        with:
          name: libomega_edit.dylib
          path: lib/libomega_edit.dylib

      - name: Download linux lib file
        uses: actions/download-artifact@v2.1.0
        with:
          name: libomega_edit.so
          path: lib/libomega_edit.so

      - name: Move out lib files
        run: |
          cd lib/
          mv libomega_edit.dylib libomega_edit.dylib_dir
          mv libomega_edit.so libomega_edit.so_dir
          mv libomega_edit.dylib_dir/libomega_edit.dylib .
          mv libomega_edit.so_dir/libomega_edit.so .
          rm -rf libomega_edit.dylib_dir libomega_edit.so_dir

      - name: Create java backend package
        run: sbt universal:packageBin

      - name: Upload java release package
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: server/core/target/universal/omega-edit-${{env.PKG_VERSION}}.zip
          asset_name: omega-edit-java-${{env.PKG_VERSION}}.zip
          asset_content_type: application/tar+gzip
