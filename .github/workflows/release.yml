# Copyright (c) 2021 Concurrent Technologies Corporation.
#                                                                                                               
# Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at                                                    
#                                                                                                               
#     http://www.apache.org/licenses/LICENSE-2.0                                                                
#                                                                                                               
# Unless required by applicable law or agreed to in writing, software is distributed under the License is       
# distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or              
# implied.  See the License for the specific language governing permissions and limitations under the License.  

---
name: Automatic Release
on:
  push:
    tags:
      - 'v*.*.*'
env:
  node_version: 14
  export_cmd: |
    GIT_TAG=$(echo ${GITHUB_REF#refs/*/} | cut -d 'v' -f 2)
    PKG_VERSION=$(echo $(node -p "JSON.stringify(require('./package.json').version)") | sed 's|"||g')
    echo "GIT_TAG=$GIT_TAG" >> $GITHUB_ENV
    echo "PKG_VERSION=$PKG_VERSION" >> $GITHUB_ENV

jobs:
  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3

      - name: Count lines of code (CLOC)
        uses: djdefi/cloc-actions@5
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          checkName: "CLOC"
          ref: ${{ github.event.pull_request.head.sha || github.sha }}

      - name: Check ratCheck
        uses: fountainhead/action-wait-for-check@v1.1.0
        id: rat-check
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          # This check name is defined as the github action job name (in .github/workflows/testing.yaml)
          checkName: "Rat Check"
          ref: ${{ github.event.pull_request.head.sha || github.sha }}
      
      - name: Check scala format
        uses: fountainhead/action-wait-for-check@v1.1.0
        id: scala-format
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          # This check name is defined as the github action job name (in .github/workflows/testing.yaml)
          checkName: "Scala code is properly formatted"
          ref: ${{ github.event.pull_request.head.sha || github.sha }}
      
      - name: Check typescript format
        uses: fountainhead/action-wait-for-check@v1.1.0
        id: ts-format
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          # This check name is defined as the github action job name (in .github/workflows/testing.yaml)
          checkName: "TypeScript code is properly formatted"
          ref: ${{ github.event.pull_request.head.sha || github.sha }}
      
      - name: Check tests - macos
        uses: fountainhead/action-wait-for-check@v1.1.0
        id: macos-tests
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          # This check name is defined as the github action job name (in .github/workflows/testing.yaml)
          checkName: "Build middleware macos-11 üîß"
          ref: ${{ github.event.pull_request.head.sha || github.sha }}

      - name: Check tests - ubuntu
        uses: fountainhead/action-wait-for-check@v1.1.0
        id: ubuntu-tests
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          # This check name is defined as the github action job name (in .github/workflows/testing.yaml)
          checkName: "Build middleware ubuntu-20.04 üîß"
          ref: ${{ github.event.pull_request.head.sha || github.sha }}
      
      - name: Check tests - windows
        uses: fountainhead/action-wait-for-check@v1.1.0
        id: windows-tests
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          # This check name is defined as the github action job name (in .github/workflows/testing.yaml)
          checkName: "Build middleware windows-2019 üîß"
          ref: ${{ github.event.pull_request.head.sha || github.sha }}

      - name: Quality gate
        if: steps.rat-check.outputs.conclusion != 'success' || steps.scala-format.outputs.conclusion != 'success' || steps.ts-format.outputs.conclusion != 'success' || steps.macos-tests.outputs.conclusion != 'success' || steps.ubuntu-tests.outputs.conclusion != 'success' || steps.windows-tests.outputs.conclusion != 'success'
        run: |
          echo "Rat Check Status: ${{ steps.rat-check.conclusion }}"
          echo "Scala Format Status: ${{ steps.scala-format.conclusion }}"
          echo "Typescript Format Status: ${{ steps.ts-format.conclusion }}"
          echo "MacOS Test Status: ${{ steps.macos-tests.conclusion }}"
          echo "Ubuntu Test Status: ${{ steps.ubuntu-tests.conclusion }}"
          echo "Windows Test Status: ${{ steps.windows-tests.conclusion }}"
          false

  create-release:
    name: Create Release ‚ú®
    needs: [quality-gate]
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout üõéÔ∏è
        uses: actions/checkout@v3

      - name: Export git tag and package.json version üö¢
        run: ${{ env.export_cmd }}

      - name: Check if pre-release ‚úÖ
        run: |
          if [[ ${{ env.GIT_TAG }} == *"pre-"* || ${{ env.GIT_TAG }} == *"-pre"* ]]; then
            echo "PRE_RELEASE=true" >> $GITHUB_ENV
          else
            echo "PRE_RELEASE=false" >> $GITHUB_ENV
          fi
        shell: bash

      - name: Create release üîß
        uses: actions/create-release@v1
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          draft: false
          prerelease: "${{ env.PRE_RELEASE }}"

      - name: Create upload_url file üîß
        run: echo "${{ steps.create_release.outputs.upload_url }}" > upload_url

      - name: Upload upload_url üî∫
        uses: actions/upload-artifact@v3
        with:
          name: upload_url
          path: upload_url

  scala-publish:
    needs: [create-release]
    name: Scala Publish API, Native and Server‚ú®
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout üõéÔ∏è
        uses: actions/checkout@v3

      - name: Export git tag and package.json version üö¢
        run: ${{ env.export_cmd }}
        shell: bash
      
      - name: Download upload_url üîª
        uses: actions/download-artifact@v3
        with:
          name: upload_url

      - name: Add upload_url to GITHUB_ENV
        run: |
          UPLOAD_URL=$(cat upload_url)
          echo "UPLOAD_URL=$UPLOAD_URL" >> $GITHUB_ENV

      - name: Setup Java ‚òï
        uses: actions/setup-java@v3.11.0
        with:
          distribution: temurin
          java-version: 8
          cache: sbt

      - name: Download macos Native JARs üîª
        uses: dawidd6/action-download-artifact@v2
        with:
          workflow: tests.yml
          branch: main
          workflow_conclusion: success
          name: macos-11-artifacts

      - name: Download linux Native JARs üîª
        uses: dawidd6/action-download-artifact@v2
        with:
          workflow: tests.yml
          branch: main
          workflow_conclusion: success
          name: ubuntu-20.04-artifacts
      
      - name: Download windows Native JARs üîª
        uses: dawidd6/action-download-artifact@v2
        with:
          workflow: tests.yml
          branch: main
          workflow_conclusion: success
          name: windows-2019-artifacts

      - name: Move jars out üöö
        env:
          folder: "omega-edit-native_2.13"
        run: |
          mv -v ${{ env.folder }}/${{ env.PKG_VERSION }}/${{ env.folder }}-${{ env.PKG_VERSION }}-windows-* .
          mv -v ${{ env.folder }}/${{ env.PKG_VERSION }}/${folder}-${{ env.PKG_VERSION }}-macos-* .
          mv -v ${{ env.folder }}/${{ env.PKG_VERSION }}/${folder}-${{ env.PKG_VERSION }}-linux-* .
        
      - name: Download native JARs for M1 mac üîª
        env:
          folder: "omega-edit-native_2.13"
        run: |
          base_url=https://raw.githubusercontent.com/Shanedell/omega-edit-aarch/main/${{ env.folder }}-${{ env.PKG_VERSION }}
          base_filename=${{ env.folder }}-${{ env.PKG_VERSION }}

          curl ${base_url}-macos-aarch64.jar --output ${base_filename}-macos-aarch64.jar
          curl ${base_url}-linux-aarch64.jar --output ${base_filename}-linux-aarch64.jar

      ###########################
      ## Scala publish process ##
      ###########################

      - name: Package Scala Native üéÅ
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          IS_RELEASE: true
        run: sbt native/publish
        working-directory: server/scala

      - name: Package Scala API üéÅ
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          IS_RELEASE: true
        run: sbt api/publish
        working-directory: server/scala

      - name: Package Scala RPC server üéÅ
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          IS_RELEASE: true
          SERVER_RELEASE: true
        run: |
          rm -rf ~/.m2/repository
          sbt serv/Universal/packageBin
        working-directory: server/scala
        shell: bash

      - name: Fix folder name for Scala RPC server üîß
        run: |
          mv -v \
            server/scala/serv/target/universal/omega-edit-grpc-server-${{ env.PKG_VERSION }}.zip \
            omega-edit-grpc-server-${{ env.PKG_VERSION }}.zip

      - name: Upload Scala RPC server - Not Release üî∫
        uses: actions/upload-artifact@v3
        with:
          name: omega-edit-grpc-server-${{ env.PKG_VERSION }}.zip
          path: omega-edit-grpc-server-${{ env.PKG_VERSION }}.zip

      - name: Upload Scala RPC server - Release üî∫
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ env.UPLOAD_URL }}
          asset_path: ./omega-edit-grpc-server-${{ env.PKG_VERSION }}.zip
          asset_name: omega-edit-grpc-server-${{ env.PKG_VERSION }}.zip
          asset_content_type: application/tar+gzip

  node-build:
    name: Node Release ‚ú®
    runs-on: ubuntu-20.04 # NOTE: build on older OS versions to support older OS versions
    needs: [scala-publish]
    steps:
      - name: Checkout üõéÔ∏è
        uses: actions/checkout@v3

      - name: Export git tag and package.json version üö¢
        run: ${{ env.export_cmd }}

      - name: Download upload_url üîª
        uses: actions/download-artifact@v3
        with:
          name: upload_url

      - name: Add upload_url to GITHUB_ENV
        run: |
          UPLOAD_URL=$(cat upload_url)
          echo "UPLOAD_URL=$UPLOAD_URL" >> $GITHUB_ENV

      ##########################
      ## Node release process ##
      ##########################
      - name: Setup Node üìê
        uses: actions/setup-node@v3
        with:
          registry-url: 'https://registry.npmjs.org'
          node-version: ${{ env.node_version }}

      - name: Download scala release file üîª
        uses: actions/download-artifact@v3
        with:
          name: omega-edit-grpc-server-${{ env.PKG_VERSION }}.zip
          path: omega-edit-grpc-server-${{ env.PKG_VERSION }}.zip

      - name: Extract scala server file üõª
        run: |
          scala_pkg_file="omega-edit-grpc-server-${{ env.PKG_VERSION }}.zip"
          mv -v "${scala_pkg_file}" "${scala_pkg_file}_dir"
          mv -v "${scala_pkg_file}_dir/${scala_pkg_file}" "${scala_pkg_file}"
          rm -rf "${scala_pkg_file}_dir"
          mkdir -p server/scala/serv/target/universal || true
          mv "$scala_pkg_file" "server/scala/serv/target/universal/$scala_pkg_file"

      - name: Create server and client package tarball file üîß
        run: |
          yarn
          yarn package-no-sbt # create both client and server package

      - name: Upload node server release tarball üî∫
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ env.UPLOAD_URL }}
          asset_path: ./packages/server/omega-edit-node-server-v${{ env.PKG_VERSION }}.tgz
          asset_name: omega-edit-node-server-v${{ env.PKG_VERSION }}.tgz
          asset_content_type: application/tar+gzip

      - name: Upload node client release tarball üî∫
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ env.UPLOAD_URL }}
          asset_path: ./packages/client/omega-edit-node-client-v${{ env.PKG_VERSION }}.tgz
          asset_name: omega-edit-node-client-v${{ env.PKG_VERSION }}.tgz
          asset_content_type: application/tar+gzip

      - name: Publish server node package to npm registry üöÄ
        run: yarn publish -f --access=public
        working-directory: packages/server/out
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        if: ${{ contains(github.event.head_commit.message, '[node_publish]') }}

      - name: Publish client node package to npm registry üöÄ
        run: yarn publish -f --access=public
        working-directory: packages/client/out
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        if: ${{ contains(github.event.head_commit.message, '[node_publish]') }}
