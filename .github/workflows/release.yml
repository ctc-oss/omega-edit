# Copyright (c) 2021 Concurrent Technologies Corporation.
#                                                                                                               
# Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at                                                    
#                                                                                                               
#     http://www.apache.org/licenses/LICENSE-2.0                                                                
#                                                                                                               
# Unless required by applicable law or agreed to in writing, software is distributed under the License is       
# distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or              
# implied.  See the License for the specific language governing permissions and limitations under the License.  

---
name: Automatic Release
on:
  push:
    tags:
      - 'v*.*.*'
env:
  node_version: 14
  export_cmd: |
    GIT_TAG=$(echo ${GITHUB_REF#refs/*/} | cut -d 'v' -f 2)
    PKG_VERSION=$(echo $(node -p "JSON.stringify(require('./src/rpc/client/ts/package.json').version)") | sed 's|"||g')
    echo "GIT_TAG=$GIT_TAG" >> $GITHUB_ENV
    echo "PKG_VERSION=$PKG_VERSION" >> $GITHUB_ENV

jobs:
  create-release:
    name: Create Release ✨
    runs-on: ubuntu-latest
    steps:
      - name: Checkout 🛎️
        uses: actions/checkout@v3

      - name: Export git tag and package.json version 🚢
        run: ${{ env.export_cmd }}

      - name: Check if pre-release ✅
        run: |
          if [[ ${{ env.GIT_TAG }} == *"pre-"* || ${{ env.GIT_TAG }} == *"-pre"* ]]; then
            echo "PRE_RELEASE=true" >> $GITHUB_ENV
          else
            echo "PRE_RELEASE=false" >> $GITHUB_ENV
          fi
        shell: bash

      - name: Create release 🔧
        uses: actions/create-release@v1
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          draft: false
          prerelease: "${{ env.PRE_RELEASE }}"

      - name: Create upload_url file 🔧
        run: echo "${{ steps.create_release.outputs.upload_url }}" > upload_url

      - name: Upload upload_url 🔺
        uses: actions/upload-artifact@v3
        with:
          name: upload_url
          path: upload_url

  native-build-mac-win:
    strategy:
      matrix:
        os: [macos-latest, windows-latest]
    name: Build ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    needs: [create-release]
    steps:
      - name: Enable Developer Command Prompt 💻
        if: runner.os == 'Windows'
        uses: ilammy/msvc-dev-cmd@v1

      - name: Checkout 🛎️
        uses: actions/checkout@v3

      - name: Export git tag and package.json version 🚢
        run: ${{ env.export_cmd }}
        shell: bash

      - name: Check if git tag matches package version ✅
        run: if [[ ${{ env.GIT_TAG }} != ${{ env.PKG_VERSION }} ]]; then exit 1; else exit 0; fi
        shell: bash

      - name: Setup Java ☕
        uses: actions/setup-java@v3.8.0
        with:
          distribution: temurin
          java-version: 8
          cache: sbt

      - name: Setup Python 🐍
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install Conan 💪
        uses: turtlebrowser/get-conan@main

      - name: Setup cmake 🔧
        uses: lukka/get-cmake@latest

      - name: Setup Java ☕
        uses: actions/setup-java@v3.8.0
        with:
          distribution: temurin
          java-version: 8
          cache: sbt

      - name: Build Ωedit 🏗️
        run: |
          cmake -S . -B build -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=YES -DBUILD_DOCS=OFF
          cmake --build build --target omega_edit

      - name: Move library file mac 🚚
        if: startsWith(matrix.os, 'mac')
        run: mv -v build/lib/* lib
        shell: bash

      - name: Move library file windows 🚚
        if: startsWith(matrix.os, 'win')
        run: mv -v build/bin/omega_edit.dll lib/
        shell: bash

      - name: Package Scala Native 🎁
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: sbt native/publishM2
        working-directory: src/rpc/server/scala

      - name: Upload Native JARs 🔺
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.os }}-artifacts
          path: ~/.m2/repository/com/ctc/omega-edit-native*
          if-no-files-found: error

  api-native-publish:
    needs: [native-build-mac-win]
    name: Publish Scala API and Native packages
    runs-on: ubuntu-latest
    steps:
      - name: Checkout 🛎️
        uses: actions/checkout@v3

      - name: Export git tag and package.json version 🚢
        run: ${{ env.export_cmd }}
        shell: bash

      - name: Setup Java ☕
        uses: actions/setup-java@v3.8.0
        with:
          distribution: temurin
          java-version: 8
          cache: sbt

      - name: Setup Python 🐍
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install Conan 💪
        uses: turtlebrowser/get-conan@main

      - name: Setup cmake 🔧
        uses: lukka/get-cmake@latest

      - name: Build Ωedit 🏗️
        run: |
          cmake -S . -B build -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=YES -DBUILD_DOCS=OFF
          cmake --build build --target omega_edit

      - name: Move library file 🚚
        run: mv -v build/lib/* lib
        shell: bash

      - name: Download macos Native JARs 🔻
        uses: actions/download-artifact@v3
        with:
          name: macos-latest-artifacts

      - name: Download windows Native JARs 🔻
        uses: actions/download-artifact@v3
        with:
          name: windows-latest-artifacts

      - name: Move windows and macos jars out 🚚
        run: |
          for folder in "omega-edit-native_2.13"; do
            mv -v ${folder}/${{ env.PKG_VERSION }}/${folder}-${{ env.PKG_VERSION }}-windows-* .
            mv -v ${folder}/${{ env.PKG_VERSION }}/${folder}-${{ env.PKG_VERSION }}-macos-* .
          done

      - name: Package Scala Native 🎁
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          mv -v src/rpc/server/scala/build.sbt .github/build.sbt
          mv -v .github/release.sbt src/rpc/server/scala/build.sbt
          cd src/rpc/server/scala
          sbt native/publish

      - name: Package Scala API 🎁
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: sbt api/publish
        working-directory: src/rpc/server/scala

  scala-release:
    name: Scala Release ✨
    runs-on: ubuntu-latest
    needs: [api-native-publish]
    steps:
      - name: Checkout 🛎️
        uses: actions/checkout@v3

      - name: Export git tag and package.json version 🚢
        run: ${{ env.export_cmd }}

      - name: Download upload_url 🔻
        uses: actions/download-artifact@v3
        with:
          name: upload_url

      - name: Add upload_url to GITHUB_ENV
        run: |
          UPLOAD_URL=$(cat upload_url)
          echo "UPLOAD_URL=$UPLOAD_URL" >> $GITHUB_ENV

      ###########################
      ## Scala release process ##
      ###########################
      - name: Setup Java ☕
        uses: actions/setup-java@v3.8.0
        with:
          distribution: temurin
          java-version: 8
          cache: sbt

      - name: Package Scala RPC server 🎁
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          mv -v src/rpc/server/scala/build.sbt .github/build.sbt
          mv -v .github/release.sbt src/rpc/server/scala/build.sbt
          cd src/rpc/server/scala
          sbt serv/Universal/packageBin
        shell: bash

      - name: Fix folder name for Scala RPC server 🔧
        run: |
          mv -v \
            src/rpc/server/scala/serv/target/universal/omega-edit-grpc-server-${{ env.PKG_VERSION }}.zip \
            omega-edit-grpc-server-${{ env.PKG_VERSION }}.zip
          unzip omega-edit-grpc-server-${{ env.PKG_VERSION }}.zip
          mv -v omega-edit-grpc-server-${{ env.PKG_VERSION }} omega-edit-scala-server-${{ env.PKG_VERSION }}
          zip -r omega-edit-scala-server-${{ env.PKG_VERSION }}.zip omega-edit-scala-server-${{ env.PKG_VERSION }}

      - name: Upload Scala RPC server - Not Release 🔺
        uses: actions/upload-artifact@v3
        with:
          name: omega-edit-scala-server-${{ env.PKG_VERSION }}.zip
          path: omega-edit-scala-server-${{ env.PKG_VERSION }}.zip

      - name: Upload Scala RPC server - Release 🔺
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ env.UPLOAD_URL }}
          asset_path: ./omega-edit-scala-server-${{ env.PKG_VERSION }}.zip
          asset_name: omega-edit-scala-server-${{ env.PKG_VERSION }}.zip
          asset_content_type: application/tar+gzip

  node-build:
    name: Node Release ✨
    runs-on: ubuntu-latest
    needs: [scala-release]
    steps:
      - name: Checkout 🛎️
        uses: actions/checkout@v3

      - name: Export git tag and package.json version 🚢
        run: ${{ env.export_cmd }}

      - name: Download upload_url 🔻
        uses: actions/download-artifact@v3
        with:
          name: upload_url

      - name: Add upload_url to GITHUB_ENV
        run: |
          UPLOAD_URL=$(cat upload_url)
          echo "UPLOAD_URL=$UPLOAD_URL" >> $GITHUB_ENV

      ##########################
      ## Node release process ##
      ##########################
      - name: Setup Node 📐
        uses: actions/setup-node@v3
        with:
          registry-url: 'https://registry.npmjs.org'
          node-version: ${{ env.node_version }}

      - name: Download scala release file 🔻
        uses: actions/download-artifact@v3
        with:
          name: omega-edit-scala-server-${{ env.PKG_VERSION }}.zip
          path: omega-edit-scala-server-${{ env.PKG_VERSION }}.zip

      - name: Move out scala package file 🛻
        run: |
          scala_pkg_file="omega-edit-scala-server-${{ env.PKG_VERSION }}.zip"
          mv -v "${scala_pkg_file}" "${scala_pkg_file}_dir"
          mv -v "${scala_pkg_file}_dir/${scala_pkg_file}" "${scala_pkg_file}"
          rm -rf "${scala_pkg_file}_dir"
          mv "$scala_pkg_file" "src/rpc/client/ts/$scala_pkg_file"

      - name: Create package tarball file 🔧
        run: |
          cd src/rpc/client/ts
          yarn install
          yarn package

      - name: Move out node package file 🛻
        run: mv -v src/rpc/client/ts/omega-edit-v${{ env.PKG_VERSION }}.tgz .

      - name: Upload node release tarball 🔺
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ env.UPLOAD_URL }}
          asset_path: ./omega-edit-v${{ env.PKG_VERSION }}.tgz
          asset_name: omega-edit-grpc-node-client-${{ env.PKG_VERSION }}.tgz
          asset_content_type: application/tar+gzip

      - name: Publish node package to npm registry 🚀
        run: |
          cp -v src/rpc/client/ts/package.json .
          yarn publish omega-edit-v${{ env.PKG_VERSION }}.tgz
          rm -rf package.json
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        if: ${{ contains(github.event.head_commit.message, '[node_publish]') }}
