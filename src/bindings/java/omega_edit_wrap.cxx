/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.1.0
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGJAVA
#define SWIGJAVA
#endif



#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1,
  SWIG_JavaIOException,
  SWIG_JavaRuntimeException,
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError,
  SWIG_JavaIllegalStateException,
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { SWIG_JavaIllegalStateException, "java/lang/IllegalStateException" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else


/* Includes the header in the wrapper code */
#include "../../include/omega_edit.h"
#include "../../include/omega_edit/check.h"
#include "../../include/omega_edit/stl_string_adaptor.hpp"


#include <stdint.h>		// Use the C99 official header


#include <string>


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jlong JNICALL Java_omega_1editJNI_omega_1change_1get_1offset(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  omega_change_t *arg1 = (omega_change_t *) 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(omega_change_t **)&jarg1; 
  result = (int64_t)omega_change_get_offset((omega_change_t const *)arg1);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_omega_1editJNI_omega_1change_1get_1length(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  omega_change_t *arg1 = (omega_change_t *) 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(omega_change_t **)&jarg1; 
  result = (int64_t)omega_change_get_length((omega_change_t const *)arg1);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_omega_1editJNI_omega_1change_1get_1serial(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  omega_change_t *arg1 = (omega_change_t *) 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(omega_change_t **)&jarg1; 
  result = (int64_t)omega_change_get_serial((omega_change_t const *)arg1);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jchar JNICALL Java_omega_1editJNI_omega_1change_1get_1kind_1as_1char(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jchar jresult = 0 ;
  omega_change_t *arg1 = (omega_change_t *) 0 ;
  char result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(omega_change_t **)&jarg1; 
  result = (char)omega_change_get_kind_as_char((omega_change_t const *)arg1);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_omega_1editJNI_omega_1change_1get_1bytes(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  omega_change_t *arg1 = (omega_change_t *) 0 ;
  omega_byte_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(omega_change_t **)&jarg1; 
  result = (omega_byte_t *)omega_change_get_bytes((omega_change_t const *)arg1);
  *(omega_byte_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_omega_1editJNI_omega_1change_1is_1undone(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  omega_change_t *arg1 = (omega_change_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(omega_change_t **)&jarg1; 
  result = (int)omega_change_is_undone((omega_change_t const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_omega_1editJNI_omega_1check_1model(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  omega_session_t *arg1 = (omega_session_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(omega_session_t **)&jarg1; 
  result = (int)omega_check_model((omega_session_t const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_omega_1editJNI_OMEGA_1VIEWPORT_1CAPACITY_1LIMIT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)((1024*1024));
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_omega_1editJNI_OMEGA_1SEARCH_1PATTERN_1LENGTH_1LIMIT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(((1024*1024)/2));
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_omega_1editJNI_omega_1edit_1create_1session(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  omega_session_on_change_cbk_t arg2 = (omega_session_on_change_cbk_t) 0 ;
  void *arg3 = (void *) 0 ;
  omega_session_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(omega_session_on_change_cbk_t *)&jarg2; 
  arg3 = *(void **)&jarg3; 
  result = (omega_session_t *)omega_edit_create_session((char const *)arg1,arg2,arg3);
  *(omega_session_t **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT void JNICALL Java_omega_1editJNI_omega_1edit_1destroy_1session(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  omega_session_t *arg1 = (omega_session_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(omega_session_t **)&jarg1; 
  omega_edit_destroy_session(arg1);
}


SWIGEXPORT jlong JNICALL Java_omega_1editJNI_omega_1edit_1create_1viewport(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
  jlong jresult = 0 ;
  omega_session_t *arg1 = (omega_session_t *) 0 ;
  int64_t arg2 ;
  int64_t arg3 ;
  omega_viewport_on_change_cbk_t arg4 = (omega_viewport_on_change_cbk_t) 0 ;
  void *arg5 = (void *) 0 ;
  omega_viewport_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(omega_session_t **)&jarg1; 
  arg2 = (int64_t)jarg2; 
  arg3 = (int64_t)jarg3; 
  arg4 = *(omega_viewport_on_change_cbk_t *)&jarg4; 
  arg5 = *(void **)&jarg5; 
  result = (omega_viewport_t *)omega_edit_create_viewport(arg1,arg2,arg3,arg4,arg5);
  *(omega_viewport_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_omega_1editJNI_omega_1edit_1destroy_1viewport(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  omega_viewport_t *arg1 = (omega_viewport_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(omega_viewport_t **)&jarg1; 
  omega_edit_destroy_viewport(arg1);
}


SWIGEXPORT jint JNICALL Java_omega_1editJNI_omega_1edit_1clear_1changes(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  omega_session_t *arg1 = (omega_session_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(omega_session_t **)&jarg1; 
  result = (int)omega_edit_clear_changes(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_omega_1editJNI_omega_1edit_1undo_1last_1change(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  omega_session_t *arg1 = (omega_session_t *) 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(omega_session_t **)&jarg1; 
  result = (int64_t)omega_edit_undo_last_change(arg1);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_omega_1editJNI_omega_1edit_1redo_1last_1undo(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  omega_session_t *arg1 = (omega_session_t *) 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(omega_session_t **)&jarg1; 
  result = (int64_t)omega_edit_redo_last_undo(arg1);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_omega_1editJNI_omega_1edit_1save(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jint jarg3) {
  jint jresult = 0 ;
  omega_session_t *arg1 = (omega_session_t *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(omega_session_t **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (int)jarg3; 
  result = (int)omega_edit_save((omega_session_t const *)arg1,(char const *)arg2,arg3);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_omega_1editJNI_omega_1edit_1delete(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  omega_session_t *arg1 = (omega_session_t *) 0 ;
  int64_t arg2 ;
  int64_t arg3 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(omega_session_t **)&jarg1; 
  arg2 = (int64_t)jarg2; 
  arg3 = (int64_t)jarg3; 
  result = (int64_t)omega_edit_delete(arg1,arg2,arg3);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_omega_1editJNI_omega_1edit_1insert_1bytes(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  omega_session_t *arg1 = (omega_session_t *) 0 ;
  int64_t arg2 ;
  omega_byte_t *arg3 = (omega_byte_t *) 0 ;
  int64_t arg4 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(omega_session_t **)&jarg1; 
  arg2 = (int64_t)jarg2; 
  arg3 = *(omega_byte_t **)&jarg3; 
  arg4 = (int64_t)jarg4; 
  result = (int64_t)omega_edit_insert_bytes(arg1,arg2,(omega_byte_t const *)arg3,arg4);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_omega_1editJNI_omega_1edit_1insert(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jstring jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  omega_session_t *arg1 = (omega_session_t *) 0 ;
  int64_t arg2 ;
  char *arg3 = (char *) 0 ;
  int64_t arg4 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(omega_session_t **)&jarg1; 
  arg2 = (int64_t)jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (int64_t)jarg4; 
  result = (int64_t)omega_edit_insert(arg1,arg2,(char const *)arg3,arg4);
  jresult = (jlong)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_omega_1editJNI_omega_1edit_1overwrite_1bytes(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  omega_session_t *arg1 = (omega_session_t *) 0 ;
  int64_t arg2 ;
  omega_byte_t *arg3 = (omega_byte_t *) 0 ;
  int64_t arg4 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(omega_session_t **)&jarg1; 
  arg2 = (int64_t)jarg2; 
  arg3 = *(omega_byte_t **)&jarg3; 
  arg4 = (int64_t)jarg4; 
  result = (int64_t)omega_edit_overwrite_bytes(arg1,arg2,(omega_byte_t const *)arg3,arg4);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_omega_1editJNI_omega_1edit_1overwrite(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jstring jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  omega_session_t *arg1 = (omega_session_t *) 0 ;
  int64_t arg2 ;
  char *arg3 = (char *) 0 ;
  int64_t arg4 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(omega_session_t **)&jarg1; 
  arg2 = (int64_t)jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (int64_t)jarg4; 
  result = (int64_t)omega_edit_overwrite(arg1,arg2,(char const *)arg3,arg4);
  jresult = (jlong)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_omega_1editJNI_omega_1license_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)omega_license_get();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_omega_1editJNI_omega_1search_1create_1context_1bytes(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jint jarg6) {
  jlong jresult = 0 ;
  omega_session_t *arg1 = (omega_session_t *) 0 ;
  omega_byte_t *arg2 = (omega_byte_t *) 0 ;
  int64_t arg3 ;
  int64_t arg4 ;
  int64_t arg5 ;
  int arg6 ;
  omega_search_context_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(omega_session_t **)&jarg1; 
  arg2 = *(omega_byte_t **)&jarg2; 
  arg3 = (int64_t)jarg3; 
  arg4 = (int64_t)jarg4; 
  arg5 = (int64_t)jarg5; 
  arg6 = (int)jarg6; 
  result = (omega_search_context_t *)omega_search_create_context_bytes((omega_session_t const *)arg1,(omega_byte_t const *)arg2,arg3,arg4,arg5,arg6);
  *(omega_search_context_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_omega_1editJNI_omega_1search_1create_1context(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jint jarg6) {
  jlong jresult = 0 ;
  omega_session_t *arg1 = (omega_session_t *) 0 ;
  char *arg2 = (char *) 0 ;
  int64_t arg3 ;
  int64_t arg4 ;
  int64_t arg5 ;
  int arg6 ;
  omega_search_context_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(omega_session_t **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (int64_t)jarg3; 
  arg4 = (int64_t)jarg4; 
  arg5 = (int64_t)jarg5; 
  arg6 = (int)jarg6; 
  result = (omega_search_context_t *)omega_search_create_context((omega_session_t const *)arg1,(char const *)arg2,arg3,arg4,arg5,arg6);
  *(omega_search_context_t **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_omega_1editJNI_omega_1search_1context_1get_1offset(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  omega_search_context_t *arg1 = (omega_search_context_t *) 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(omega_search_context_t **)&jarg1; 
  result = (int64_t)omega_search_context_get_offset((omega_search_context_t const *)arg1);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_omega_1editJNI_omega_1search_1context_1get_1length(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  omega_search_context_t *arg1 = (omega_search_context_t *) 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(omega_search_context_t **)&jarg1; 
  result = (int64_t)omega_search_context_get_length((omega_search_context_t const *)arg1);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_omega_1editJNI_omega_1search_1next_1match(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  omega_search_context_t *arg1 = (omega_search_context_t *) 0 ;
  int64_t arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(omega_search_context_t **)&jarg1; 
  arg2 = (int64_t)jarg2; 
  result = (int)omega_search_next_match(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_omega_1editJNI_omega_1search_1destroy_1context(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  omega_search_context_t *arg1 = (omega_search_context_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(omega_search_context_t **)&jarg1; 
  omega_search_destroy_context(arg1);
}


SWIGEXPORT jstring JNICALL Java_omega_1editJNI_omega_1session_1get_1file_1path(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  omega_session_t *arg1 = (omega_session_t *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(omega_session_t **)&jarg1; 
  result = (char *)omega_session_get_file_path((omega_session_t const *)arg1);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_omega_1editJNI_omega_1session_1get_1user_1data(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  omega_session_t *arg1 = (omega_session_t *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(omega_session_t **)&jarg1; 
  result = (void *)omega_session_get_user_data((omega_session_t const *)arg1);
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_omega_1editJNI_omega_1session_1get_1num_1viewports(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  omega_session_t *arg1 = (omega_session_t *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(omega_session_t **)&jarg1; 
  result = omega_session_get_num_viewports((omega_session_t const *)arg1);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_omega_1editJNI_omega_1session_1get_1num_1changes(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  omega_session_t *arg1 = (omega_session_t *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(omega_session_t **)&jarg1; 
  result = omega_session_get_num_changes((omega_session_t const *)arg1);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_omega_1editJNI_omega_1session_1get_1num_1undone_1changes(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  omega_session_t *arg1 = (omega_session_t *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(omega_session_t **)&jarg1; 
  result = omega_session_get_num_undone_changes((omega_session_t const *)arg1);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_omega_1editJNI_omega_1session_1get_1computed_1file_1size(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  omega_session_t *arg1 = (omega_session_t *) 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(omega_session_t **)&jarg1; 
  result = (int64_t)omega_session_get_computed_file_size((omega_session_t const *)arg1);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_omega_1editJNI_omega_1session_1get_1last_1change(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  omega_session_t *arg1 = (omega_session_t *) 0 ;
  omega_change_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(omega_session_t **)&jarg1; 
  result = (omega_change_t *)omega_session_get_last_change((omega_session_t const *)arg1);
  *(omega_change_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_omega_1editJNI_omega_1session_1get_1last_1undo(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  omega_session_t *arg1 = (omega_session_t *) 0 ;
  omega_change_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(omega_session_t **)&jarg1; 
  result = (omega_change_t *)omega_session_get_last_undo((omega_session_t const *)arg1);
  *(omega_change_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_omega_1editJNI_omega_1session_1get_1change(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  omega_session_t *arg1 = (omega_session_t *) 0 ;
  int64_t arg2 ;
  omega_change_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(omega_session_t **)&jarg1; 
  arg2 = (int64_t)jarg2; 
  result = (omega_change_t *)omega_session_get_change((omega_session_t const *)arg1,arg2);
  *(omega_change_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_omega_1editJNI_omega_1session_1viewport_1on_1change_1callbacks_1paused(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  omega_session_t *arg1 = (omega_session_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(omega_session_t **)&jarg1; 
  result = (int)omega_session_viewport_on_change_callbacks_paused((omega_session_t const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_omega_1editJNI_omega_1session_1pause_1viewport_1on_1change_1callbacks(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  omega_session_t *arg1 = (omega_session_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(omega_session_t **)&jarg1; 
  omega_session_pause_viewport_on_change_callbacks(arg1);
}


SWIGEXPORT void JNICALL Java_omega_1editJNI_omega_1session_1resume_1viewport_1on_1change_1callbacks(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  omega_session_t *arg1 = (omega_session_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(omega_session_t **)&jarg1; 
  omega_session_resume_viewport_on_change_callbacks(arg1);
}


SWIGEXPORT jstring JNICALL Java_omega_1editJNI_omega_1change_1get_1string(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  omega_change_t *arg1 = (omega_change_t *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(omega_change_t **)&jarg1; 
  result = omega_change_get_string((omega_change_t const *)arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_omega_1editJNI_omega_1viewport_1get_1string(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  omega_viewport_t *arg1 = (omega_viewport_t *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(omega_viewport_t **)&jarg1; 
  result = omega_viewport_get_string((omega_viewport_t const *)arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_omega_1editJNI_omega_1edit_1insert_1string(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  omega_session_t *arg1 = (omega_session_t *) 0 ;
  int64_t arg2 ;
  std::string *arg3 = 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(omega_session_t **)&jarg1; 
  arg2 = (int64_t)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (int64_t)omega_edit_insert_string(arg1,arg2,(std::string const &)*arg3);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_omega_1editJNI_omega_1edit_1overwrite_1string(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  omega_session_t *arg1 = (omega_session_t *) 0 ;
  int64_t arg2 ;
  std::string *arg3 = 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(omega_session_t **)&jarg1; 
  arg2 = (int64_t)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (int64_t)omega_edit_overwrite_string(arg1,arg2,(std::string const &)*arg3);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_omega_1editJNI_omega_1search_1create_1context_1string_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jlong jarg3, jlong jarg4, jint jarg5) {
  jlong jresult = 0 ;
  omega_session_t *arg1 = (omega_session_t *) 0 ;
  std::string *arg2 = 0 ;
  int64_t arg3 ;
  int64_t arg4 ;
  int arg5 ;
  omega_search_context_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(omega_session_t **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int64_t)jarg3; 
  arg4 = (int64_t)jarg4; 
  arg5 = (int)jarg5; 
  result = (omega_search_context_t *)omega_search_create_context_string((omega_session_t const *)arg1,(std::string const &)*arg2,arg3,arg4,arg5);
  *(omega_search_context_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_omega_1editJNI_omega_1search_1create_1context_1string_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  omega_session_t *arg1 = (omega_session_t *) 0 ;
  std::string *arg2 = 0 ;
  int64_t arg3 ;
  int64_t arg4 ;
  omega_search_context_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(omega_session_t **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int64_t)jarg3; 
  arg4 = (int64_t)jarg4; 
  result = (omega_search_context_t *)omega_search_create_context_string((omega_session_t const *)arg1,(std::string const &)*arg2,arg3,arg4);
  *(omega_search_context_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_omega_1editJNI_omega_1search_1create_1context_1string_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  omega_session_t *arg1 = (omega_session_t *) 0 ;
  std::string *arg2 = 0 ;
  int64_t arg3 ;
  omega_search_context_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(omega_session_t **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int64_t)jarg3; 
  result = (omega_search_context_t *)omega_search_create_context_string((omega_session_t const *)arg1,(std::string const &)*arg2,arg3);
  *(omega_search_context_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_omega_1editJNI_omega_1search_1create_1context_1string_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  omega_session_t *arg1 = (omega_session_t *) 0 ;
  std::string *arg2 = 0 ;
  omega_search_context_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(omega_session_t **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (omega_search_context_t *)omega_search_create_context_string((omega_session_t const *)arg1,(std::string const &)*arg2);
  *(omega_search_context_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_omega_1editJNI_omega_1version_1major(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)omega_version_major();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_omega_1editJNI_omega_1version_1minor(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)omega_version_minor();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_omega_1editJNI_omega_1version_1patch(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)omega_version_patch();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_omega_1editJNI_omega_1version(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)omega_version();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_omega_1editJNI_omega_1viewport_1get_1session(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  omega_viewport_t *arg1 = (omega_viewport_t *) 0 ;
  omega_session_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(omega_viewport_t **)&jarg1; 
  result = (omega_session_t *)omega_viewport_get_session((omega_viewport_t const *)arg1);
  *(omega_session_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_omega_1editJNI_omega_1viewport_1get_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  omega_viewport_t *arg1 = (omega_viewport_t *) 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(omega_viewport_t **)&jarg1; 
  result = (int64_t)omega_viewport_get_capacity((omega_viewport_t const *)arg1);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_omega_1editJNI_omega_1viewport_1get_1length(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  omega_viewport_t *arg1 = (omega_viewport_t *) 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(omega_viewport_t **)&jarg1; 
  result = (int64_t)omega_viewport_get_length((omega_viewport_t const *)arg1);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_omega_1editJNI_omega_1viewport_1get_1data(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  omega_viewport_t *arg1 = (omega_viewport_t *) 0 ;
  omega_byte_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(omega_viewport_t **)&jarg1; 
  result = (omega_byte_t *)omega_viewport_get_data((omega_viewport_t const *)arg1);
  *(omega_byte_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_omega_1editJNI_omega_1viewport_1has_1changes(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  omega_viewport_t *arg1 = (omega_viewport_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(omega_viewport_t **)&jarg1; 
  result = (int)omega_viewport_has_changes((omega_viewport_t const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_omega_1editJNI_omega_1viewport_1get_1offset(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  omega_viewport_t *arg1 = (omega_viewport_t *) 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(omega_viewport_t **)&jarg1; 
  result = (int64_t)omega_viewport_get_offset((omega_viewport_t const *)arg1);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_omega_1editJNI_omega_1viewport_1get_1user_1data(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  omega_viewport_t *arg1 = (omega_viewport_t *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(omega_viewport_t **)&jarg1; 
  result = (void *)omega_viewport_get_user_data((omega_viewport_t const *)arg1);
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_omega_1editJNI_omega_1viewport_1update(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  omega_viewport_t *arg1 = (omega_viewport_t *) 0 ;
  int64_t arg2 ;
  int64_t arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(omega_viewport_t **)&jarg1; 
  arg2 = (int64_t)jarg2; 
  arg3 = (int64_t)jarg3; 
  result = (int)omega_viewport_update(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_omega_1editJNI_omega_1viewport_1execute_1on_1change(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  omega_viewport_t *arg1 = (omega_viewport_t *) 0 ;
  omega_change_t *arg2 = (omega_change_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(omega_viewport_t **)&jarg1; 
  arg2 = *(omega_change_t **)&jarg2; 
  omega_viewport_execute_on_change(arg1,(omega_change_t const *)arg2);
}


SWIGEXPORT jint JNICALL Java_omega_1editJNI_omega_1visit_1changes(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  omega_session_t *arg1 = (omega_session_t *) 0 ;
  omega_session_change_visitor_cbk_t arg2 = (omega_session_change_visitor_cbk_t) 0 ;
  void *arg3 = (void *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(omega_session_t **)&jarg1; 
  arg2 = *(omega_session_change_visitor_cbk_t *)&jarg2; 
  arg3 = *(void **)&jarg3; 
  result = (int)omega_visit_changes((omega_session_t const *)arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_omega_1editJNI_omega_1visit_1changes_1reverse(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  omega_session_t *arg1 = (omega_session_t *) 0 ;
  omega_session_change_visitor_cbk_t arg2 = (omega_session_change_visitor_cbk_t) 0 ;
  void *arg3 = (void *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(omega_session_t **)&jarg1; 
  arg2 = *(omega_session_change_visitor_cbk_t *)&jarg2; 
  arg3 = *(void **)&jarg3; 
  result = (int)omega_visit_changes_reverse((omega_session_t const *)arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_omega_1editJNI_omega_1visit_1change_1create_1context(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  omega_session_t *arg1 = (omega_session_t *) 0 ;
  int arg2 ;
  omega_visit_change_context_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(omega_session_t **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (omega_visit_change_context_t *)omega_visit_change_create_context((omega_session_t const *)arg1,arg2);
  *(omega_visit_change_context_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_omega_1editJNI_omega_1visit_1change_1next(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  omega_visit_change_context_t *arg1 = (omega_visit_change_context_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(omega_visit_change_context_t **)&jarg1; 
  result = (int)omega_visit_change_next(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_omega_1editJNI_omega_1visit_1change_1context_1get_1change(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  omega_visit_change_context_t *arg1 = (omega_visit_change_context_t *) 0 ;
  omega_change_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(omega_visit_change_context_t **)&jarg1; 
  result = (omega_change_t *)omega_visit_change_context_get_change((omega_visit_change_context_struct const *)arg1);
  *(omega_change_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_omega_1editJNI_omega_1visit_1change_1destroy_1context(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  omega_visit_change_context_t *arg1 = (omega_visit_change_context_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(omega_visit_change_context_t **)&jarg1; 
  omega_visit_change_destroy_context(arg1);
}


#ifdef __cplusplus
}
#endif

