/**********************************************************************************************************************
 * Copyright (c) 2021 Concurrent Technologies Corporation.                                                            *
 *                                                                                                                    *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance     *
 * with the License.  You may obtain a copy of the License at                                                         *
 *                                                                                                                    *
 *     http://www.apache.org/licenses/LICENSE-2.0                                                                     *
 *                                                                                                                    *
 * Unless required by applicable law or agreed to in writing, software is distributed under the License is            *
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or                   *
 * implied.  See the License for the specific language governing permissions and limitations under the License.       *
 *                                                                                                                    *
 **********************************************************************************************************************/

syntax = "proto3";

import "google/protobuf/empty.proto";

package omega_edit;

option cc_enable_arenas = true;

service Editor {
  rpc GetVersion(google.protobuf.Empty) returns (VersionResponse);
  rpc CreateSession(CreateSessionRequest) returns (CreateSessionResponse);
  rpc SaveSession(SaveSessionRequest) returns (SaveSessionResponse);
  rpc DestroySession(ObjectId) returns (ObjectId);
  rpc SubmitChange(ChangeRequest) returns (ChangeResponse);
  rpc UndoLastChange(ObjectId) returns (ChangeResponse);
  rpc RedoLastUndo(ObjectId) returns (ChangeResponse);
  rpc ClearChanges(ObjectId) returns (ObjectId);
  rpc PauseSessionChanges(ObjectId) returns (ObjectId);
  rpc ResumeSessionChanges(ObjectId) returns (ObjectId);
  rpc PauseViewportEvents(ObjectId) returns (ObjectId);
  rpc ResumeViewportEvents(ObjectId) returns (ObjectId);
  rpc CreateViewport(CreateViewportRequest) returns (CreateViewportResponse);
  rpc GetViewportData(ViewportDataRequest) returns (ViewportDataResponse);
  rpc DestroyViewport(ObjectId) returns (ObjectId);
  rpc GetChangeDetails(SessionEvent) returns (ChangeDetailsResponse);
  rpc GetLastChange(ObjectId) returns (ChangeDetailsResponse);
  rpc GetLastUndo(ObjectId) returns (ChangeDetailsResponse);
  rpc GetComputedFileSize(ObjectId) returns (ComputedFileSizeResponse);
  rpc GetCount(CountRequest) returns (CountResponse);
  rpc GetSessionCount(google.protobuf.Empty) returns (SessionCountResponse);
  rpc GetSegment(SegmentRequest) returns (SegmentResponse);
  rpc SearchSession(SearchRequest) returns (SearchResponse);
  rpc GetByteFrequencyProfile(ByteFrequencyProfileRequest) returns (ByteFrequencyProfileResponse);

  // Event streams
  rpc SubscribeToSessionEvents(EventSubscriptionRequest) returns (stream SessionEvent);
  rpc SubscribeToViewportEvents(EventSubscriptionRequest) returns (stream ViewportEvent);
  rpc UnsubscribeToSessionEvents(ObjectId) returns (ObjectId);
  rpc UnsubscribeToViewportEvents(ObjectId) returns (ObjectId);
}

message EventSubscriptionRequest {
  string id = 1;
  optional int32 interest = 2;
}

enum ChangeKind {
  UNDEFINED_CHANGE = 0;
  CHANGE_DELETE = 1;
  CHANGE_INSERT = 2;
  CHANGE_OVERWRITE = 3;
}

enum SessionEventKind {
  SESSION_EVT_UNDEFINED = 0;
  SESSION_EVT_CREATE = 1;
  SESSION_EVT_EDIT = 2;
  SESSION_EVT_UNDO = 4;
  SESSION_EVT_CLEAR = 8;
  SESSION_EVT_TRANSFORM = 16;
  SESSION_EVT_CREATE_CHECKPOINT = 32;
  SESSION_EVT_DESTROY_CHECKPOINT = 64;
  SESSION_EVT_SAVE = 128;
  SESSION_EVT_CHANGES_PAUSED = 256;
  SESSION_EVT_CHANGES_RESUMED = 512;
  SESSION_EVT_CREATE_VIEWPORT = 1024;
  SESSION_EVT_DESTROY_VIEWPORT = 2048;
}

enum ViewportEventKind {
  VIEWPORT_EVT_UNDEFINED = 0;
  VIEWPORT_EVT_CREATE = 1;
  VIEWPORT_EVT_EDIT = 2;
  VIEWPORT_EVT_UNDO = 4;
  VIEWPORT_EVT_CLEAR = 8;
  VIEWPORT_EVT_TRANSFORM = 16;
  VIEWPORT_EVT_MODIFY = 32;
}

enum CountKind {
  UNDEFINED_COUNT_KIND = 0;
  COUNT_FILE_SIZE = 1;
  COUNT_CHANGES = 2;
  COUNT_UNDOS = 3;
  COUNT_VIEWPORTS = 4;
  COUNT_CHECKPOINTS = 5;
  COUNT_SEARCH_CONTEXTS = 6;
}

message CountRequest {
  string session_id = 1;
  CountKind kind = 2;
}

message CountResponse {
  string session_id = 1;
  CountKind kind = 2;
  int64 count = 3;
}

message SessionCountResponse {
  int64 count = 1;
}

message VersionResponse {
  int32 major = 1;
  int32 minor = 2;
  int32 patch = 3;
}

message ObjectId {
  string id = 1;
}

message ChangeRequest {
  string session_id = 1;
  ChangeKind kind = 2;
  int64 offset = 3;
  int64 length = 4;
  optional bytes data = 5;
}

message ChangeResponse {
  string session_id = 1;
  int64 serial = 2;
}

message CreateViewportRequest {
  string session_id = 1;
  int64 capacity = 2;
  int64 offset = 3;
  bool is_floating = 4;
  optional string viewport_id_desired = 5;
}

message CreateViewportResponse {
  string session_id = 1;
  string viewport_id = 2;
}

message ViewportDataRequest {
  string viewport_id = 1;
}

message ViewportDataResponse {
  string viewport_id = 1;
  int64 offset = 2;
  int64 length = 3;
  bytes data = 4;
}

message CreateSessionRequest {
  optional string file_path = 1;
  optional string session_id_desired = 2;
}

message CreateSessionResponse {
  string session_id = 1;
}

message SaveSessionRequest {
  string session_id = 1;
  string file_path = 2;
  optional bool allow_overwrite = 3;
}

message SaveSessionResponse {
  string session_id = 1;
  string file_path = 2;
}

message SessionEvent {
  string session_id = 1;
  SessionEventKind session_event_kind = 2;
  int64 computed_file_size = 3;
  int64 change_count = 4;
  int64 undo_count = 5;
  optional int64 serial = 6;
}

message ViewportEvent {
  string session_id = 1;
  string viewport_id = 2;
  ViewportEventKind viewport_event_kind = 3;
  optional int64 serial = 4;
  optional int64 offset = 5;
  optional int64 length = 6;
  optional bytes data = 7;
}

message ChangeDetailsResponse {
  string session_id = 1;
  int64 serial = 2;
  ChangeKind kind = 3;
  int64 offset = 4;
  int64 length = 5;
  optional bytes data = 6;
}

message ComputedFileSizeResponse {
  string session_id = 1;
  int64 computed_file_size = 2;
}

message SegmentRequest {
  string session_id = 1;
  int64 offset = 2;
  int64 length = 3;
}

message SegmentResponse {
  string session_id = 1;
  int64 offset = 2;
  bytes data = 3;
}

message SearchRequest {
  string session_id = 1;
  bytes pattern = 2;
  optional bool is_case_insensitive = 3;
  optional int64 offset = 4;
  optional int64 length = 5;
  optional int64 limit = 6;
}

message SearchResponse {
  string session_id = 1;
  bytes pattern = 2;
  bool is_case_insensitive = 3;
  int64 offset = 4;
  int64 length = 5;
  repeated int64 match_offset = 6;
}

message ByteFrequencyProfileRequest {
  string session_id = 1;
  optional int64 offset = 2;
  optional int64 length = 3;
}

message ByteFrequencyProfileResponse {
  string session_id = 1;
  int64 offset = 2;
  int64 length = 3;
  repeated int64 frequency = 4;
}
