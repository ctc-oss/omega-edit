/*
 * Copyright (c) 2021 Concurrent Technologies Corporation.
 *
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// @ts-nocheck <-- This is needed as this file is basically a JavaScript script
//                 but with some TypeScript niceness baked in
const fs = require('fs')
const path = require('path')
const execSync = require('child_process').execSync
const pkg_dir = 'dist/package'
const pkg_version = JSON.parse(fs.readFileSync('./package.json').toString())[
  'version'
]

function copyFiles(srcDir, destDir, extension = '') {
  // Ensure that the destination directory exists
  if (!fs.existsSync(destDir)) {
    fs.mkdirSync(destDir, { recursive: true })
  }

  fs.readdirSync(srcDir).forEach((file) => {
    const srcPath = path.join(srcDir, file)
    const destPath = path.join(destDir, file)

    if (fs.statSync(srcPath).isDirectory()) {
      copyFiles(srcPath, destPath, extension)
    } else if (extension.length === 0 || file.endsWith(extension)) {
      fs.copyFileSync(srcPath, destPath)
    }
  })
}

// Setup package directory
function setup() {
  if (fs.existsSync(pkg_dir)) {
    fs.rmSync(pkg_dir, { recursive: true, force: true })
  }

  // Copy generated files to the package directory
  copyFiles('src', pkg_dir, '.d.ts')
  copyFiles('src', pkg_dir, '.js')
  copyFiles('out', pkg_dir)

  // Copy the server directory to the package directory
  copyFiles(
    `omega-edit-grpc-server-${pkg_version}`,
    path.join(pkg_dir, `omega-edit-grpc-server-${pkg_version}`)
  )

  // Copy some other files to the package directory
  const filesToCopy = ['package.json', 'README.md']
  filesToCopy.forEach((file) => {
    fs.copyFileSync(file, path.join(pkg_dir, file))
  })
}

// Create package
function create() {
  execSync('yarn install', { cwd: pkg_dir })
  execSync(`yarn pack --cwd ${pkg_dir}`)
  const packageFile = `omega-edit-v${pkg_version}.tgz`
  fs.renameSync(path.join(pkg_dir, packageFile), packageFile)
}

// Generate the client version file
function genClientVersion(clientVersionFile) {
  // Get the version from the package.json file
  const version = JSON.parse(fs.readFileSync('package.json').toString())[
    'version'
  ]

  // Write the client version file
  fs.writeFileSync(
    clientVersionFile,
    `// GENERATED SOURCE -- DO NOT EDIT!!
// This file is generated by the genClientVersion function in scripts/package.ts

export const OMEGA_EDIT_CLIENT_VERSION = '${version}'
`
  )
}

module.exports = {
  setup: setup,
  create: create,
  genClientVersion: genClientVersion,
}
