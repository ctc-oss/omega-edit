/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import {
  CountKind,
  CountRequest,
  CreateViewportRequest,
  ObjectId,
  ViewportDataRequest,
  ViewportDataResponse,
} from './omega_edit_pb'
import { getLogger } from './logger'
import { getClient } from './client'

/**
 * Create a new viewport in a session
 * @param desired_viewport_id if defined, the viewport ID to assign to this viewport, if undefined a unique viewport ID
 * will be generated by the server
 * @param session_id session to create the viewport in
 * @param offset byte-offset start of the viewport
 * @param capacity capacity of the viewport in bytes
 * @param is_floating false if the viewport is to remain fixed at the given offset, true if the viewport is expected to
 * "float" as bytes are inserted or deleted before the start of this viewport
 * @return created viewport's ID, on success
 */
export function createViewport(
  desired_viewport_id: string | undefined,
  session_id: string,
  offset: number,
  capacity: number,
  is_floating: boolean
): Promise<string> {
  return new Promise<string>((resolve, reject) => {
    let request = new CreateViewportRequest()
      .setSessionId(session_id)
      .setOffset(offset)
      .setCapacity(capacity)
      .setIsFloating(is_floating)
    if (desired_viewport_id !== undefined && desired_viewport_id.length > 0) {
      request.setViewportIdDesired(desired_viewport_id)
    }
    getLogger().debug({ fn: 'createViewport', rqst: request.toObject() })
    getClient().createViewport(request, (err, r) => {
      if (err) {
        getLogger().error({
          fn: 'createViewport',
          err: {
            msg: err.message,
            details: err.details,
            code: err.code,
            stack: err.stack,
          },
        })
        return reject('createViewport error: ' + err.message)
      }
      getLogger().debug({ fn: 'createViewport', resp: r.toObject() })
      return resolve(r.getViewportId())
    })
  })
}

/**
 * Destroy a given viewport
 * @param viewport_id viewport to destroy
 * @return destroyed viewport's ID, on success
 */
export function destroyViewport(viewport_id: string): Promise<string> {
  return new Promise<string>((resolve, reject) => {
    const request = new ObjectId().setId(viewport_id)
    getLogger().debug({ fn: 'destroyViewport', rqst: request.toObject() })
    getClient().destroyViewport(request, (err, r) => {
      if (err) {
        getLogger().error({
          fn: 'destroyViewport',
          err: {
            msg: err.message,
            details: err.details,
            code: err.code,
            stack: err.stack,
          },
        })
        return reject('destroyViewport error: ' + err.message)
      }
      getLogger().debug({ fn: 'destroyViewport', resp: r.toObject() })
      return resolve(r.getId())
    })
  })
}

/**
 * Given a session, return the number of viewports in that session
 * @param sesssion_id session to get the number of viewports in
 * @return number of viewports in the given session, on success
 */
export function getViewportCount(sesssion_id: string): Promise<number> {
  return new Promise<number>((resolve, reject) => {
    const request = new CountRequest()
      .setSessionId(sesssion_id)
      .setKind(CountKind.COUNT_VIEWPORTS)
    getLogger().debug({ fn: 'getViewportCount', rqst: request.toObject() })
    getClient().getCount(request, (err, r) => {
      if (err) {
        getLogger().error({
          fn: 'getViewportCount',
          err: {
            msg: err.message,
            details: err.details,
            code: err.code,
            stack: err.stack,
          },
        })
        return reject('getViewportCount error: ' + err.message)
      }
      getLogger().debug({ fn: 'getViewportCount', resp: r.toObject() })
      return resolve(r.getCount())
    })
  })
}

/**
 * Given a viewport ID, return the data in the viewport
 * @param viewport_id viewport to get the data from
 * @return ViewportDataResponse with the data and where it is in the session, on success
 * @remarks viewport length can be less than the viewport capacity
 */
export function getViewportData(
  viewport_id: string
): Promise<ViewportDataResponse> {
  return new Promise<ViewportDataResponse>((resolve, reject) => {
    const request = new ViewportDataRequest().setViewportId(viewport_id)
    getLogger().debug({ fn: 'getViewportData', rqst: request.toObject() })
    getClient().getViewportData(request, (err, r) => {
      if (err) {
        getLogger().error({
          fn: 'getViewportData',
          err: {
            msg: err.message,
            details: err.details,
            code: err.code,
            stack: err.stack,
          },
        })
        return reject('getViewportData error: ' + err.message)
      }
      getLogger().debug({ fn: 'getViewportData', resp: r.toObject() })
      return resolve(r)
    })
  })
}

/**
 * Given a viewport ID, returns true if the viewport has changes and false otherwise
 * @param viewport_id viewport to check for changes
 * @return true if the viewport has changes and false otherwise
 */
export function viewportHasChanges(viewport_id: string): Promise<boolean> {
  return new Promise<boolean>((resolve, reject) => {
    const request = new ObjectId().setId(viewport_id)
    getLogger().debug({ fn: 'viewportHasChanges', rqst: request.toObject() })
    getClient().viewportHasChanges(request, (err, r) => {
      if (err) {
        getLogger().error({
          fn: 'viewportHasChanges',
          err: {
            msg: err.message,
            details: err.details,
            code: err.code,
            stack: err.stack,
          },
        })
        return reject('viewportHasChanges error: ' + err.message)
      }
      getLogger().debug({ fn: 'viewportHasChanges', resp: r.toObject() })
      return resolve(r.getResponse())
    })
  })
}

/**
 * Pause viewport events being triggered on this session
 * @param session_id session to pause viewport events on
 * @return session ID that has had its viewport events paused, on success
 */
export function pauseViewportEvents(session_id: string): Promise<string> {
  return new Promise<string>((resolve, reject) => {
    const request = new ObjectId().setId(session_id)
    getLogger().debug({ fn: 'pauseViewportEvents', rqst: request.toObject() })
    getClient().pauseViewportEvents(request, (err, r) => {
      if (err) {
        getLogger().error({
          fn: 'pauseViewportEvents',
          err: {
            msg: err.message,
            details: err.details,
            code: err.code,
            stack: err.stack,
          },
        })
        return reject('pauseViewportEvents error: ' + err.message)
      }
      getLogger().debug({ fn: 'pauseViewportEvents', resp: r.toObject() })
      return resolve(r.getId())
    })
  })
}

/**
 * Resume events on viewports in the given session
 * @param session_id to resume viewport events on
 * @return session ID that has had its viewport events resumed, on success
 */
export function resumeViewportEvents(session_id: string): Promise<string> {
  return new Promise<string>((resolve, reject) => {
    const request = new ObjectId().setId(session_id)
    getLogger().debug({ fn: 'resumeViewportEvents', rqst: request.toObject() })
    getClient().resumeViewportEvents(request, (err, r) => {
      if (err) {
        getLogger().error({
          fn: 'resumeViewportEvents',
          err: {
            msg: err.message,
            details: err.details,
            code: err.code,
            stack: err.stack,
          },
        })
        return reject('resumeViewportEvents error: ' + err.message)
      }
      getLogger().debug({ fn: 'resumeViewportEvents', resp: r.toObject() })
      return resolve(r.getId())
    })
  })
}

/**
 * Unsubscribe from events for the given viewport
 * @param viewport_id viewport to unsubscribe from events
 * @return viewport ID that has been unsubscribed from events, on success
 */
export function unsubscribeViewport(viewport_id: string): Promise<string> {
  return new Promise<string>((resolve, reject) => {
    const request = new ObjectId().setId(viewport_id)
    getLogger().debug({ fn: 'unsubscribeViewport', rqst: request.toObject() })
    getClient().unsubscribeToViewportEvents(request, (err, r) => {
      if (err) {
        getLogger().error({
          fn: 'unsubscribeViewport',
          err: {
            msg: err.message,
            details: err.details,
            code: err.code,
            stack: err.stack,
          },
        })
        return reject('unsubscribeViewport error: ' + err.message)
      }
      getLogger().debug({ fn: 'unsubscribeViewport', resp: r.toObject() })
      return resolve(r.getId())
    })
  })
}
