/**********************************************************************************************************************
 * Copyright (c) 2021 Concurrent Technologies Corporation.                                                            *
 *                                                                                                                    *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance     *
 * with the License.  You may obtain a copy of the License at                                                         *
 *                                                                                                                    *
 *     http://www.apache.org/licenses/LICENSE-2.0                                                                     *
 *                                                                                                                    *
 * Unless required by applicable law or agreed to in writing, software is distributed under the License is            *
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or                   *
 * implied.  See the License for the specific language governing permissions and limitations under the License.       *
 *                                                                                                                    *
 **********************************************************************************************************************/

syntax = "proto3";

import "google/protobuf/empty.proto";

package omega_edit;

option cc_enable_arenas = true;

service Editor {
  rpc GetServerInfo(google.protobuf.Empty) returns (ServerInfoResponse);
  rpc CreateSession(CreateSessionRequest) returns (CreateSessionResponse);
  rpc SaveSession(SaveSessionRequest) returns (SaveSessionResponse);
  rpc DestroySession(ObjectId) returns (ObjectId);
  rpc SubmitChange(ChangeRequest) returns (ChangeResponse);
  rpc UndoLastChange(ObjectId) returns (ChangeResponse);
  rpc RedoLastUndo(ObjectId) returns (ChangeResponse);
  rpc ClearChanges(ObjectId) returns (ObjectId);
  rpc PauseSessionChanges(ObjectId) returns (ObjectId);
  rpc ResumeSessionChanges(ObjectId) returns (ObjectId);
  rpc PauseViewportEvents(ObjectId) returns (ObjectId);
  rpc ResumeViewportEvents(ObjectId) returns (ObjectId);
  rpc SessionBeginTransaction(ObjectId) returns (ObjectId);
  rpc SessionEndTransaction(ObjectId) returns (ObjectId);
  rpc NotifyChangedViewports(ObjectId) returns (IntResponse);
  rpc CreateViewport(CreateViewportRequest) returns (ViewportDataResponse);
  rpc ModifyViewport(ModifyViewportRequest) returns (ViewportDataResponse);
  rpc ViewportHasChanges(ObjectId) returns (BooleanResponse);
  rpc GetViewportData(ViewportDataRequest) returns (ViewportDataResponse);
  rpc DestroyViewport(ObjectId) returns (ObjectId);
  rpc GetChangeDetails(SessionEvent) returns (ChangeDetailsResponse);
  rpc GetLastChange(ObjectId) returns (ChangeDetailsResponse);
  rpc GetLastUndo(ObjectId) returns (ChangeDetailsResponse);
  rpc GetComputedFileSize(ObjectId) returns (ComputedFileSizeResponse);
  rpc GetByteOrderMark(SegmentRequest) returns (ByteOrderMarkResponse);
  rpc GetContentType(SegmentRequest) returns (ContentTypeResponse);
  rpc GetLanguage(TextRequest) returns (LanguageResponse);
  rpc GetCount(CountRequest) returns (CountResponse);
  rpc GetSessionCount(google.protobuf.Empty) returns (SessionCountResponse);
  rpc GetSegment(SegmentRequest) returns (SegmentResponse);
  rpc SearchSession(SearchRequest) returns (SearchResponse);
  rpc GetByteFrequencyProfile(SegmentRequest) returns (ByteFrequencyProfileResponse);
  rpc GetCharacterCounts(TextRequest) returns (CharacterCountResponse);
  rpc ServerControl(ServerControlRequest) returns (ServerControlResponse);
  rpc GetHeartbeat(HeartbeatRequest) returns (HeartbeatResponse);

  // Event streams
  rpc SubscribeToSessionEvents(EventSubscriptionRequest) returns (stream SessionEvent);
  rpc SubscribeToViewportEvents(EventSubscriptionRequest) returns (stream ViewportEvent);
  rpc UnsubscribeToSessionEvents(ObjectId) returns (ObjectId);
  rpc UnsubscribeToViewportEvents(ObjectId) returns (ObjectId);
}

message EventSubscriptionRequest {
  string id = 1;
  optional int32 interest = 2;
}

enum IOFlags {
  IO_FLG_NONE = 0;
  IO_FLG_OVERWRITE = 1;
  IO_FLG_FORCE_OVERWRITE = 2;
}

enum ChangeKind {
  UNDEFINED_CHANGE = 0;
  CHANGE_DELETE = 1;
  CHANGE_INSERT = 2;
  CHANGE_OVERWRITE = 3;
}

// Make sure these match the session events defined in fwd_defs.h
enum SessionEventKind {
  SESSION_EVT_UNDEFINED = 0;
  SESSION_EVT_CREATE = 1;
  SESSION_EVT_EDIT = 2;
  SESSION_EVT_UNDO = 4;
  SESSION_EVT_CLEAR = 8;
  SESSION_EVT_TRANSFORM = 16;
  SESSION_EVT_CREATE_CHECKPOINT = 32;
  SESSION_EVT_DESTROY_CHECKPOINT = 64;
  SESSION_EVT_SAVE = 128;
  SESSION_EVT_CHANGES_PAUSED = 256;
  SESSION_EVT_CHANGES_RESUMED = 512;
  SESSION_EVT_CREATE_VIEWPORT = 1024;
  SESSION_EVT_DESTROY_VIEWPORT = 2048;
}

// Make sure these match the viewport events defined in fwd_defs.h
enum ViewportEventKind {
  VIEWPORT_EVT_UNDEFINED = 0;
  VIEWPORT_EVT_CREATE = 1;
  VIEWPORT_EVT_EDIT = 2;
  VIEWPORT_EVT_UNDO = 4;
  VIEWPORT_EVT_CLEAR = 8;
  VIEWPORT_EVT_TRANSFORM = 16;
  VIEWPORT_EVT_MODIFY = 32;
  VIEWPORT_EVT_CHANGES = 64;
}

enum CountKind {
  UNDEFINED_COUNT_KIND = 0;
  COUNT_COMPUTED_FILE_SIZE = 1;
  COUNT_CHANGES = 2;
  COUNT_UNDOS = 3;
  COUNT_VIEWPORTS = 4;
  COUNT_CHECKPOINTS = 5;
  COUNT_SEARCH_CONTEXTS = 6;
  COUNT_CHANGE_TRANSACTIONS = 7;
  COUNT_UNDO_TRANSACTIONS = 8;
}

message CountRequest {
  string session_id = 1;
  repeated CountKind kind = 2;
}

message SingleCount {
  CountKind kind = 1;
  int64 count = 2;
}

message CountResponse {
  string session_id = 1;
  repeated SingleCount counts = 2;
}

message SessionCountResponse {
  int64 count = 1; // session count
}

message ServerInfoResponse {
  string hostname = 1; // server hostname
  int32 process_id = 2; // server process id
  string server_version = 3; // server version
  string jvm_version = 4; // server jvm version
  string jvm_vendor = 5; // server jvm vendor
  string jvm_path = 6; // server jvm path
  int32 available_processors = 7; // server available processors
}

message ObjectId {
  string id = 1;
}

message ChangeRequest {
  string session_id = 1;
  ChangeKind kind = 2;
  int64 offset = 3;
  int64 length = 4;
  optional bytes data = 5;
}

message ChangeResponse {
  string session_id = 1;
  int64 serial = 2;
}

message CreateViewportRequest {
  string session_id = 1;
  int64 capacity = 2;
  int64 offset = 3;
  bool is_floating = 4;
  optional string viewport_id_desired = 5;
}

message ModifyViewportRequest {
  string viewport_id = 1;
  int64 offset = 2;
  int64 capacity = 3;
  bool is_floating = 4;
}

message ViewportDataRequest {
  string viewport_id = 1;
}

message ViewportDataResponse {
  string viewport_id = 1;
  int64 offset = 2;
  int64 length = 3;
  bytes data = 4;
  int64 following_byte_count = 5;
}

message CreateSessionRequest {
  optional string file_path = 1;
  optional string session_id_desired = 2;
  optional string checkpoint_directory = 3;
}

message CreateSessionResponse {
  string session_id = 1;
  string checkpoint_directory = 2;
  optional int64 file_size = 3;
}

message ByteOrderMarkResponse {
  string session_id = 1; // session id
  int64 offset = 2; // offset of the byte order mark in bytes
  int64 length = 3; // length of the byte order mark in bytes (0, 2, 3, or 4)
  string byte_order_mark = 4; // byte order mark as a string (e.g. "UTF-8", "UTF-16LE", "UTF-16BE", "UTF-32LE", "UTF-32BE", or "none")
}

message ContentTypeResponse {
  string session_id = 1; // session id
  int64 offset = 2; // offset of where the content type was detected in bytes
  int64 length = 3; // number of bytes used to detect the content type
  string content_type = 4; // detected content type
}

message LanguageResponse {
  string session_id = 1; // session id
  int64 offset = 2; // offset of where the language was detected in bytes
  int64 length = 3; // number of bytes used to detect the language
  string language = 4; // 2-letter ISO 639-1 language code
}

message SaveSessionRequest {
  string session_id = 1;
  string file_path = 2;
  int32 io_flags = 3;
  optional int64 offset = 4;
  optional int64 length = 5;
}

message SaveSessionResponse {
  string session_id = 1;
  string file_path = 2;
  int32 save_status = 3;
}

message SessionEvent {
  string session_id = 1;
  SessionEventKind session_event_kind = 2;
  int64 computed_file_size = 3;
  int64 change_count = 4;
  int64 undo_count = 5;
  optional int64 serial = 6;
}

message ViewportEvent {
  string session_id = 1;
  string viewport_id = 2;
  ViewportEventKind viewport_event_kind = 3;
  optional int64 serial = 4;
  optional int64 offset = 5;
  optional int64 length = 6;
  optional bytes data = 7;
}

message ChangeDetailsResponse {
  string session_id = 1;
  int64 serial = 2;
  ChangeKind kind = 3;
  int64 offset = 4;
  int64 length = 5;
  optional bytes data = 6;
}

message ComputedFileSizeResponse {
  string session_id = 1; // session id
  int64 computed_file_size = 2; // computed file size in bytes
}

message SegmentRequest {
  string session_id = 1; // session id
  int64 offset = 2; // offset of the segment in bytes
  int64 length = 3; // length of the segment in bytes
}

message TextRequest {
  string session_id = 1; // session id
  int64 offset = 2; // offset of the segment in bytes
  int64 length = 3; // length of the segment in bytes
  string byte_order_mark = 4; // byte order mark as a string (e.g. "UTF-8", "UTF-16LE", "UTF-16BE", "UTF-32LE", "UTF-32BE", or "none") used to decode the segment
}

message SegmentResponse {
  string session_id = 1; // session id
  int64 offset = 2; // offset of the segment in bytes
  bytes data = 3; // segment content in bytes
}

message ByteFrequencyProfileResponse {
  string session_id = 1; // session id
  int64 offset = 2; // offset of the segment in bytes
  int64 length = 3; // length of the segment in bytes
  repeated int64 frequency = 4; // frequency of each byte value (0-255) found in the segment, 256 is the count of DOS line endings (CR+LF)
}

message CharacterCountResponse {
  string session_id = 1; // session id
  int64 offset = 2; // offset of the segment in bytes
  int64 length = 3; // length of the segment in bytes
  string byte_order_mark = 4; // byte order mark as a string (e.g. "UTF-8", "UTF-16LE", "UTF-16BE", "UTF-32LE", "UTF-32BE", or "none") used to decode the segment
  int64 byte_order_mark_bytes = 5; // count of the byte order mark in bytes (0, 2, 3, or 4) found at the beginning of the segment
  int64 single_byte_chars = 6; // count of single byte characters found in the segment
  int64 double_byte_chars = 7; // count of double byte characters found in the segment
  int64 triple_byte_chars = 8; // count of triple byte characters found in the segment
  int64 quad_byte_chars = 9; // count of quad byte characters found in the segment
  int64 invalid_bytes = 10; // count of invalid bytes found in the segment
}

message SearchRequest {
  string session_id = 1; // session id
  bytes pattern = 2; // search pattern
  optional bool is_case_insensitive = 3; // case insensitive search
  optional bool is_reverse = 4; // reverse search
  optional int64 offset = 5; // offset in bytes to start search
  optional int64 length = 6; // length in bytes to search
  optional int64 limit = 7; // limit of matches
}

message SearchResponse {
  string session_id = 1;
  bytes pattern = 2;
  bool is_case_insensitive = 3;
  bool is_reverse = 4;
  int64 offset = 5;
  int64 length = 6;
  repeated int64 match_offset = 7;
}

message BooleanResponse {
  bool response = 1;
}

message IntResponse {
  int64 response = 1;
}

enum ServerControlKind {
  SERVER_CONTROL_UNDEFINED = 0;
  SERVER_CONTROL_GRACEFUL_SHUTDOWN = 1; // server will stop accepting new sessions and will exit when all sessions are destroyed
  SERVER_CONTROL_IMMEDIATE_SHUTDOWN = 2; // server will stop accepting new sessions and will exit immediately
}

message ServerControlRequest {
  ServerControlKind kind = 1; // server control kind
}

message ServerControlResponse {
  ServerControlKind kind = 1; // server control kind
  int32 pid = 2; // server process id
  int32 response_code = 3; // response code, 0 for success, non-zero for failure
}

message HeartbeatRequest {
  string hostname = 1; // client hostname
  int32 process_id = 2; // client process id
  int32 heartbeat_interval = 3; // in milliseconds
  repeated string session_ids = 4; // client session ids
}

message HeartbeatResponse {
  int32 session_count = 1; // server session count
  int64 timestamp = 2; // server timestamp in milliseconds
  int64 uptime = 3; // server uptime in milliseconds
  int32 cpu_count = 4; // server cpu count
  double cpu_load_average = 5; // server cpu load average in percent
  int64 max_memory = 6; // server max memory in bytes
  int64 committed_memory = 7; // server committed memory in bytes
  int64 used_memory = 8; // server used memory in bytes
}
