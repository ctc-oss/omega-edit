/*
 * Copyright (c) 2021 Concurrent Technologies Corporation.
 *
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

const path = require('path')
const CopyPlugin = require('copy-webpack-plugin')
const { PinoWebpackPlugin } = require('pino-webpack-plugin')
const { CleanWebpackPlugin } = require('clean-webpack-plugin')
const webpack = require('webpack') // to access built-in plugins
const fs = require('fs')
const pkg_version = JSON.parse(fs.readFileSync('./package.json').toString())[
  'version'
]

module.exports = {
  entry: './src/index.ts',
  devtool: 'source-map',
  target: 'node',
  output: {
    path: path.resolve(__dirname, 'out'),
    filename: '[name].js',
    libraryTarget: 'commonjs2',
  },
  resolve: {
    extensions: ['.ts', '.js'],
  },
  module: {
    rules: [
      {
        test: /\.ts$/,
        exclude: /node_modules|tests/,
        use: {
          loader: 'ts-loader',
        },
      },
    ],
  },
  optimization: {
    usedExports: true,
    minimize: true,
  },
  plugins: [
    new webpack.ProgressPlugin(),
    new CleanWebpackPlugin(),
    new CopyPlugin({
      patterns: [
        'package.json',
        'README.md',
        '../../LICENSE.txt',
        'src/omega_edit_grpc_pb.d.ts',
        'src/omega_edit_pb.d.ts',
      ],
    }),
    new PinoWebpackPlugin(),
    {
      // generate a file with the client version before compiling
      apply: (compiler) => {
        compiler.hooks.compile.tap('genClientVersion', () => {
          fs.writeFileSync(
            'src/client_version.ts',
            `// GENERATED SOURCE -- DO NOT EDIT!!
// This file is generated by webpack

export const OMEGA_EDIT_CLIENT_VERSION = '${pkg_version}'
`
          )
        })
      },
    },
  ],
}
