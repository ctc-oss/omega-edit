/*
 * Copyright (c) 2021 Concurrent Technologies Corporation.
 *
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import {
  ByteFrequencyProfileResponse,
  CharacterCountResponse,
  ComputedFileSizeResponse,
  CountKind,
  CountRequest,
  CountResponse,
  CreateSessionRequest,
  CreateSessionResponse,
  IntResponse,
  IOFlags,
  ObjectId,
  SaveSessionRequest,
  SaveSessionResponse,
  SearchRequest,
  SearchResponse,
  SegmentRequest,
  SegmentResponse,
  SessionCountResponse,
  SingleCount,
} from './omega_edit_pb'
import { Empty } from 'google-protobuf/google/protobuf/empty_pb'
import { getClient } from './client'
import { getLogger } from './logger'
import { editSimple, IEditStats, overwrite } from './change'

export enum SaveStatus {
  SUCCESS = 0, // session saved successfully
  MODIFIED = -100, // target file was modified since the session was created
}

// index in the byte frequency profile array for the DOS end of line '\r\n' pair
export const PROFILE_DOS_EOL = 256

/**
 * Create a file editing session from a file path
 * @param file_path file path, will be opened for read, to create an editing session with, or undefined if starting from
 * scratch
 * @param session_id_desired if defined, the session ID to assign to this session, if undefined a unique session ID will
 * be generated by the server
 * @param checkpoint_directory if defined, the directory to store checkpoints in, if undefined, the server will use a
 * reasonable default
 * @return session ID, on success, or empty string if session creation was blocked (e.g., graceful shutdown)
 */
export async function createSession(
  file_path: string = '',
  session_id_desired: string = '',
  checkpoint_directory: string = ''
): Promise<CreateSessionResponse> {
  const log = getLogger()
  let request = new CreateSessionRequest()
  if (session_id_desired.length > 0)
    request.setSessionIdDesired(session_id_desired)
  if (file_path.length > 0) request.setFilePath(file_path)
  if (checkpoint_directory.length > 0)
    request.setCheckpointDirectory(checkpoint_directory)
  log.debug({ fn: 'createSession', rqst: request.toObject() })
  const client = await getClient()
  return new Promise<CreateSessionResponse>((resolve, reject) => {
    client.createSession(request, (err, r: CreateSessionResponse) => {
      if (err) {
        log.error({
          fn: 'createSession',
          err: {
            msg: err.message,
            details: err.details,
            code: err.code,
            stack: err.stack,
          },
        })
        return reject('createSession error: ' + err.message)
      }
      log.debug({ fn: 'createSession', resp: r.toObject() })
      return resolve(r)
    })
  })
}

/**
 * Destroy the given session and all associated objects (changes, and viewports)
 * @param session_id session to destroy
 * @return session ID that was destroyed, on success
 */
export async function destroySession(session_id: string): Promise<string> {
  const log = getLogger()
  const request = new ObjectId().setId(session_id)
  log.debug({ fn: 'destroySession', rqst: request.toObject() })
  const client = await getClient()
  return new Promise<string>((resolve, reject) => {
    client.destroySession(request, (err, r: ObjectId) => {
      if (err) {
        log.error({
          fn: 'destroySession',
          err: {
            msg: err.message,
            details: err.details,
            code: err.code,
            stack: err.stack,
          },
        })
        return reject('destroySession error: ' + err.message)
      }
      log.debug({ fn: 'destroySession', resp: r.toObject() })
      return resolve(r.getId())
    })
  })
}

/**
 * Save the given session (the edited file) to the given file path.  If the save file already exists, it can be
 * overwritten if overwrite is true.  If the file exists and overwrite is false, a new unique file name will be used as
 * determined by server.  If the file being edited is overwritten, the affected editing session will be reset.
 * @param session_id session to save
 * @param file_path file path to save to
 * @param flags IOFlags to control how the session is saved to the file
 * @param offset offset within the session to begin saving from
 * @param length number of bytes to save, if 0, save the entire session
 * @return name of the saved file, on success
 */
export async function saveSession(
  session_id: string,
  file_path: string,
  flags: number = IOFlags.IO_FLG_NONE,
  offset: number = 0,
  length: number = 0
): Promise<SaveSessionResponse> {
  const log = getLogger()
  const request = new SaveSessionRequest()
    .setSessionId(session_id)
    .setFilePath(file_path)
    .setIoFlags(flags)
    .setOffset(offset)
    .setLength(length)
  log.debug({ fn: 'saveSession', rqst: request.toObject() })
  const client = await getClient()
  return new Promise<SaveSessionResponse>((resolve, reject) => {
    client.saveSession(request, (err, r: SaveSessionResponse) => {
      if (err) {
        log.error({
          fn: 'saveSession',
          err: {
            msg: err.message,
            details: err.details,
            code: err.code,
            stack: err.stack,
          },
        })
        return reject('saveSession error: ' + err.message)
      }
      log.debug({ fn: 'saveSession', resp: r.toObject() })
      return resolve(r)
    })
  })
}

/**
 * Computed file size in bytes for a given session
 * @param session_id session to get the computed file size from
 * @return computed file size in bytes, on success
 */
export async function getComputedFileSize(session_id: string): Promise<number> {
  const log = getLogger()
  const request = new ObjectId().setId(session_id)
  log.debug({ fn: 'getComputedFileSize', rqst: request.toObject() })
  const client = await getClient()
  return new Promise<number>((resolve, reject) => {
    client.getComputedFileSize(request, (err, r: ComputedFileSizeResponse) => {
      if (err) {
        log.error({
          fn: 'getComputedFileSize',
          err: {
            msg: err.message,
            details: err.details,
            code: err.code,
            stack: err.stack,
          },
        })
        return reject('getComputedFileSize error: ' + err.message)
      }
      log.debug({ fn: 'getComputedFileSize', resp: r.toObject() })
      return resolve(r.getComputedFileSize())
    })
  })
}

/**
 * Gets any number of counts for a given session concurrently
 * @param session_id session to get the counts from
 * @param kinds kinds of counts to get
 * @return array of counts with associated kinds, on success
 */
export async function getCounts(
  session_id,
  kinds: CountKind[]
): Promise<SingleCount[]> {
  const log = getLogger()
  const request = new CountRequest().setSessionId(session_id).setKindList(kinds)
  log.debug({ fn: 'getCounts', rqst: request.toObject() })
  const client = await getClient()
  return new Promise<SingleCount[]>((resolve, reject) => {
    client.getCount(request, (err, r: CountResponse) => {
      if (err) {
        log.error({
          fn: 'getCounts',
          err: {
            msg: err.message,
            details: err.details,
            code: err.code,
            stack: err.stack,
          },
        })
        return reject('getCounts error: ' + err.message)
      }
      log.debug({ fn: 'getCounts', resp: r.toObject() })
      return resolve(r.getCountsList())
    })
  })
}

/**
 * Pause data changes to the session
 * @param session_id session to pause changes to
 * @return session ID that has its changes paused, on success
 */
export async function pauseSessionChanges(session_id: string): Promise<string> {
  const log = getLogger()
  const request = new ObjectId().setId(session_id)
  log.debug({ fn: 'pauseSessionChanges', rqst: request.toObject() })
  const client = await getClient()
  return new Promise<string>((resolve, reject) => {
    client.pauseSessionChanges(request, (err, r: ObjectId) => {
      if (err) {
        log.error({
          fn: 'pauseSessionChanges',
          err: {
            msg: err.message,
            details: err.details,
            code: err.code,
            stack: err.stack,
          },
        })
        return reject('pauseSessionChanges error: ' + err.message)
      }
      log.debug({ fn: 'pauseSessionChanges', resp: r.toObject() })
      return resolve(r.getId())
    })
  })
}

/**
 * Begin a transaction on the given session
 * @param session_id session to begin a transaction on
 * @return session ID that has a transaction started, on success
 */
export async function beginSessionTransaction(
  session_id: string
): Promise<string> {
  const log = getLogger()
  const request = new ObjectId().setId(session_id)
  log.debug({ fn: 'beginSessionTransaction', rqst: request.toObject() })
  const client = await getClient()
  return new Promise<string>((resolve, reject) => {
    client.sessionBeginTransaction(request, (err, r: ObjectId) => {
      if (err) {
        log.error({
          fn: 'beginSessionTransaction',
          err: {
            msg: err.message,
            details: err.details,
            code: err.code,
            stack: err.stack,
          },
        })
        return reject('beginSessionTransaction error: ' + err.message)
      }
      log.debug({ fn: 'beginSessionTransaction', resp: r.toObject() })
      return resolve(r.getId())
    })
  })
}

/**
 * End a transaction on the given session
 * @param session_id session to end a transaction on
 * @return session ID that has a transaction ended, on success
 */
export async function endSessionTransaction(
  session_id: string
): Promise<string> {
  const log = getLogger()
  const request = new ObjectId().setId(session_id)
  log.debug({ fn: 'endSessionTransaction', rqst: request.toObject() })
  const client = await getClient()
  return new Promise<string>((resolve, reject) => {
    client.sessionEndTransaction(request, (err, r: ObjectId) => {
      if (err) {
        log.error({
          fn: 'endSessionTransaction',
          err: {
            msg: err.message,
            details: err.details,
            code: err.code,
            stack: err.stack,
          },
        })
        return reject('endSessionTransaction error: ' + err.message)
      }
      log.debug({ fn: 'endSessionTransaction', resp: r.toObject() })
      return resolve(r.getId())
    })
  })
}

/**
 * Resume data changes on the previously paused session
 * @param session_id session to resume changes on
 * @return session ID that has its changes resumed, on success
 */
export async function resumeSessionChanges(
  session_id: string
): Promise<string> {
  const log = getLogger()
  const request = new ObjectId().setId(session_id)
  log.debug({ fn: 'resumeSessionChanges', rqst: request.toObject() })
  const client = await getClient()
  return new Promise<string>((resolve, reject) => {
    client.resumeSessionChanges(request, (err, r: ObjectId) => {
      if (err) {
        log.error({
          fn: 'resumeSessionChanges',
          err: {
            msg: err.message,
            details: err.details,
            code: err.code,
            stack: err.stack,
          },
        })
        return reject('resumeSessionChanges error: ' + err.message)
      }
      log.debug({ fn: 'resumeSessionChanges', resp: r.toObject() })
      return resolve(r.getId())
    })
  })
}

/**
 * Unsubscribe to session events
 * @param session_id session to unsubscribe
 * @return session ID that was unsubscribed, on success
 */
export async function unsubscribeSession(session_id: string): Promise<string> {
  const log = getLogger()
  const request = new ObjectId().setId(session_id)
  log.debug({ fn: 'unsubscribeSession', rqst: request.toObject() })
  const client = await getClient()
  return new Promise<string>((resolve, reject) => {
    client
      .unsubscribeToSessionEvents(request, (err, r: ObjectId) => {
        if (err) {
          log.error({
            fn: 'unsubscribeSession',
            err: {
              msg: err.message,
              details: err.details,
              code: err.code,
              stack: err.stack,
            },
          })
          return reject('unsubscribeSession error: ' + err.message)
        }
        log.debug({ fn: 'unsubscribeSession', resp: r.toObject() })
        return resolve(r.getId())
      })
      .on('error', (err) => {
        // Call cancelled thrown when server is shutdown
        if (!err.message.includes('Call cancelled')) {
          throw err
        }
      })
  })
}

/**
 * Given a session and offset, return a copy of that data segment
 * @param session_id session to copy a segment of data from
 * @param offset session offset to begin copying data from
 * @param length number of bytes to copy
 * @return copy of the desired segment of data, on success
 */
export async function getSegment(
  session_id: string,
  offset: number,
  length: number
): Promise<Uint8Array> {
  const log = getLogger()
  const request = new SegmentRequest()
    .setSessionId(session_id)
    .setOffset(offset)
    .setLength(length)
  log.debug({ fn: 'getSegment', rqst: request.toObject() })
  const client = await getClient()
  return new Promise<Uint8Array>((resolve, reject) => {
    client.getSegment(request, (err, r: SegmentResponse) => {
      if (err) {
        log.error({
          fn: 'getSegment',
          err: {
            msg: err.message,
            details: err.details,
            code: err.code,
            stack: err.stack,
          },
        })
        return reject('getSegment error: ' + err.message)
      }
      log.debug({ fn: 'getSegment', resp: r.toObject() })
      return resolve(r.getData_asU8())
    })
  })
}

/**
 * Gets the number of active editing sessions on the server
 * @return number of active sessions on the server, on success
 */
export async function getSessionCount(): Promise<number> {
  const log = getLogger()
  log.debug({ fn: 'getSessionCount' })
  const client = await getClient()
  return new Promise<number>((resolve, reject) => {
    client.getSessionCount(new Empty(), (err, r: SessionCountResponse) => {
      if (err) {
        log.error({
          fn: 'getSessionCount',
          err: {
            msg: err.message,
            details: err.details,
            code: err.code,
            stack: err.stack,
          },
        })
        return reject('getSessionCount error: ' + err.message)
      }
      log.debug({ fn: 'getSessionCount', resp: r.toObject() })
      return resolve(r.getCount())
    })
  })
}

/**
 * Notify changed viewports in the given session with a VIEWPORT_EVT_CHANGES event
 * @param session_id session to notify viewports with changes
 * @return number of viewports that were notified
 */
export async function notifyChangedViewports(
  session_id: string
): Promise<number> {
  const log = getLogger()
  const request = new ObjectId().setId(session_id)
  log.debug({
    fn: 'notifyChangedViewports',
    rqst: request.toObject(),
  })
  const client = await getClient()
  return new Promise<number>((resolve, reject) => {
    client.notifyChangedViewports(request, (err, r: IntResponse) => {
      if (err) {
        log.error({
          fn: 'notifyChangedViewports',
          err: {
            msg: err.message,
            details: err.details,
            code: err.code,
            stack: err.stack,
          },
        })
        return reject('notifyChangedViewports error: ' + err.message)
      }
      log.debug({ fn: 'notifyChangedViewports', resp: r.toObject() })
      return resolve(r.getResponse())
    })
  })
}

/**
 * Given a session, offset and length, populate a byte frequency profile
 * @param session_id session to profile
 * @param offset where in the session to begin profiling
 * @param length number of bytes from the offset to stop profiling (if 0, it will profile to the end of the session)
 * @return array of size 256 (for the 8-bit bytes) with the values being the byte frequency in the given range, on
 * success
 */
export async function profileSession(
  session_id: string,
  offset: number = 0,
  length: number = 0
): Promise<number[]> {
  const log = getLogger()
  const request = new SegmentRequest()
    .setSessionId(session_id)
    .setOffset(offset)
    .setLength(length)
  log.debug({ fn: 'profileSession', rqst: request.toObject() })
  const client = await getClient()
  return new Promise<number[]>((resolve, reject) => {
    client.getByteFrequencyProfile(
      request,
      (err, r: ByteFrequencyProfileResponse) => {
        if (err) {
          log.error({
            fn: 'profileSession',
            err: {
              msg: err.message,
              details: err.details,
              code: err.code,
              stack: err.stack,
            },
          })
          return reject('profileSession error: ' + err.message)
        }
        log.debug({ fn: 'profileSession', resp: r.toObject() })
        return resolve(r.getFrequencyList())
      }
    )
  })
}

/**
 * Given a computed profile, return the total number of bytes in the 7-bit ASCII range
 * @param profile computed profile from profileSession
 * @return total number of ASCII bytes found in the profile
 */
export function numAscii(profile: number[]): number {
  return profile.slice(0, 128).reduce((accumulator, current) => {
    return accumulator + current
  }, 0)
}

export async function countCharacters(
  session_id: string,
  offset: number = 0,
  length: number = 0
): Promise<CharacterCountResponse> {
  const log = getLogger()
  const request = new SegmentRequest()
    .setSessionId(session_id)
    .setOffset(offset)
    .setLength(length)
  log.debug({ fn: 'countCharacters', rqst: request.toObject() })
  const client = await getClient()
  return new Promise<CharacterCountResponse>((resolve, reject) => {
    client.getCharacterCounts(request, (err, r: CharacterCountResponse) => {
      if (err) {
        log.error({
          fn: 'countCharacters',
          err: {
            msg: err.message,
            details: err.details,
            code: err.code,
            stack: err.stack,
          },
        })
        return reject('countCharacters error: ' + err.message)
      }
      log.debug({ fn: 'countCharacters', resp: r.toObject() })
      return resolve(r)
    })
  })
}

/**
 * Search a segment in a session for a given pattern and return an array of offsets where the pattern was found
 * @param session_id session to find the pattern in
 * @param pattern pattern to find
 * @param is_case_insensitive false for case-sensitive matching and true for case-insensitive matching
 * @param is_reverse false for forward search and true for reverse search
 * @param offset start searching at this offset within the session, or at the start of the session if undefined
 * @param length search from the starting offset within the session up to this many bytes, if set to zero or undefined,
 * it will search to the end of the session
 * @param limit if defined, limits the number of matches found to this amount
 * @return array of offsets where the pattern was found
 */
export async function searchSession(
  session_id: string,
  pattern: string | Uint8Array,
  is_case_insensitive: boolean = false,
  is_reverse: boolean = false,
  offset: number = 0,
  length: number = 0,
  limit: number = 0
): Promise<number[]> {
  const log = getLogger()
  // make sure we have a pattern to search for
  if (pattern.length === 0) {
    log.warn({ fn: 'searchSession', err: { msg: 'empty pattern given' } })
    return []
  }
  let request = new SearchRequest()
    .setSessionId(session_id)
    .setPattern(typeof pattern === 'string' ? Buffer.from(pattern) : pattern)
    .setIsCaseInsensitive(is_case_insensitive)
    .setIsReverse(is_reverse)
    .setOffset(offset)
  if (length > 0) {
    request.setLength(length)
  }
  if (limit > 0) {
    request.setLimit(limit)
  }
  log.debug({ fn: 'searchSession', rqst: request.toObject() })
  const client = await getClient()
  return new Promise<number[]>((resolve, reject) => {
    client.searchSession(request, (err, r: SearchResponse) => {
      if (err) {
        return reject('searchSession error: ' + err.message)
      }
      log.debug({ fn: 'searchSession', resp: r.toObject() })
      return resolve(r.getMatchOffsetList())
    })
  })
}

/**
 * Replace all found patterns in a segment in a session with the given replacement and return the number of replacements
 * done
 * @param session_id session to replace patterns in
 * @param pattern pattern to replace
 * @param replacement replacement
 * @param is_case_insensitive false for case-sensitive matching and true for case-insensitive matching
 * @param is_reverse false for forward search and true for reverse search
 * @param offset start searching at this offset within the session, or at the start of the session if undefined
 * @param length search from the starting offset within the session up to this many bytes, if set to zero or undefined,
 * it will search to the end of the session
 * @param limit if defined, limits the number of matches found to this amount
 * @param front_to_back if true, replace from the front of the session to the back, otherwise replace from the back to the front
 * @param overwrite_only if true, do not remove the pattern then insert the replacement, instead overwrite starting at the beginning of the pattern
 * @param stats optional edit stats to update
 * @return number of replacements done
 * @remarks highly recommend pausing all viewport events using pauseViewportEvents before calling this function, then
 * resuming all viewport events with resumeViewportEvents after calling this function.  Since viewport events were
 * disabled during the changes, determine what viewports have changes by using the viewportHasChanges function and if so
 * refresh the ones that have changes.
 */
export async function replaceSession(
  session_id: string,
  pattern: string | Uint8Array,
  replacement: string | Uint8Array,
  is_case_insensitive: boolean = false,
  is_reverse: boolean = false,
  offset: number = 0,
  length: number = 0,
  limit: number = 0,
  front_to_back: boolean = true,
  overwrite_only: boolean = false,
  stats?: IEditStats
): Promise<number> {
  const foundLocations = await searchSession(
    session_id,
    pattern,
    is_case_insensitive,
    is_reverse,
    offset,
    length,
    limit
  )
  const patternArray =
    typeof pattern == 'string' ? Buffer.from(pattern) : pattern
  const replacementArray =
    typeof replacement == 'string' ? Buffer.from(replacement) : replacement
  if (front_to_back) {
    if (overwrite_only) {
      for (let i = 0; i < foundLocations.length; ++i) {
        await overwrite(session_id, foundLocations[i], replacementArray, stats)
      }
    } else {
      const adjustment = replacementArray.length - patternArray.length
      for (let i = 0; i < foundLocations.length; ++i) {
        await editSimple(
          session_id,
          adjustment * i + foundLocations[i],
          patternArray,
          replacementArray,
          stats
        )
      }
    }
  } else {
    // do replacements starting with the highest offset to the lowest offset, so offset adjustments don't need to be made
    if (overwrite_only) {
      for (let i = foundLocations.length - 1; i >= 0; --i) {
        await overwrite(session_id, foundLocations[i], replacementArray, stats)
      }
    } else {
      for (let i = foundLocations.length - 1; i >= 0; --i) {
        await editSimple(
          session_id,
          foundLocations[i],
          patternArray,
          replacementArray,
          stats
        )
      }
    }
  }
  return foundLocations.length
}

/**
 * Replace found patterns in a segment in session iteratively
 * @param session_id session to replace patterns in
 * @param pattern pattern to replace
 * @param replacement replacement
 * @param is_case_insensitive false for case-sensitive matching and true for case-insensitive matching
 * @param offset start searching at this offset within the session, or at the start of the session if undefined
 * @param length search from the starting offset within the session up to this many bytes, if set to zero or undefined,
 * it will search to the end of the session
 * @param overwrite_only if true, do not remove the pattern then insert the replacement, instead overwrite starting at the beginning of the pattern
 * @param stats optional edit stats to update
 * @return offset to use for the next iteration or -1 if no replacement took place
 *
 * @remarks First find the first occurrence of the pattern in the session, then ask the user if they want to replace it.
 * If they do, replace it and return the offset of the end of the replacement.  If they don't, return the offset of the
 * end of the pattern.  The next iteration should start at the returned offset.
 */
export async function replaceOneSession(
  session_id: string,
  pattern: string | Uint8Array,
  replacement: string | Uint8Array,
  is_case_insensitive: boolean = false,
  is_reverse: boolean = false,
  offset: number = 0,
  length: number = 0,
  overwrite_only: boolean = false,
  stats?: IEditStats
): Promise<number> {
  const patternArray =
    typeof pattern == 'string' ? Buffer.from(pattern) : pattern
  const replacementArray =
    typeof replacement == 'string' ? Buffer.from(replacement) : replacement
  const foundLocations = await searchSession(
    session_id,
    patternArray,
    is_case_insensitive,
    is_reverse,
    offset,
    length,
    1
  )
  if (foundLocations.length > 0) {
    if (overwrite_only) {
      await overwrite(session_id, foundLocations[0], replacementArray, stats)
    } else {
      await editSimple(
        session_id,
        foundLocations[0],
        patternArray,
        replacementArray,
        stats
      )
    }
    // the next iteration offset should be at the end of this replacement
    return foundLocations[0] + replacementArray.length
  }
  return -1
}
